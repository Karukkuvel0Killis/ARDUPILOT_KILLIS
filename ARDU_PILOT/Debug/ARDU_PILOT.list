
ARDU_PILOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006878  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006b10  08006b10  00007b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006b20  08006b20  00007b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08006b24  08006b24  00007b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08006b28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000009c  24000010  08006b38  00008010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000ac  08006b38  000080ac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c1e1  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b79  00000000  00000000  0001421f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a38  00000000  00000000  00015d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007aa  00000000  00000000  000167d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035ec8  00000000  00000000  00016f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c86c  00000000  00000000  0004ce42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015676c  00000000  00000000  000596ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001afe1a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002938  00000000  00000000  001afe60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000074  00000000  00000000  001b2798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006af8 	.word	0x08006af8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006af8 	.word	0x08006af8

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002dc:	f000 f8d6 	bl	800048c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f000 faa2 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f806 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f8a6 	bl	8000438 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80002ec:	f000 f880 	bl	80003f0 <MX_SDMMC1_SD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <main+0x18>

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b09c      	sub	sp, #112	@ 0x70
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002fe:	224c      	movs	r2, #76	@ 0x4c
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f006 fbcc 	bl	8006aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2220      	movs	r2, #32
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f006 fbc6 	bl	8006aa0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000314:	2002      	movs	r0, #2
 8000316:	f000 fe81 	bl	800101c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800031a:	2300      	movs	r3, #0
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	4b32      	ldr	r3, [pc, #200]	@ (80003e8 <SystemClock_Config+0xf4>)
 8000320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000322:	4a31      	ldr	r2, [pc, #196]	@ (80003e8 <SystemClock_Config+0xf4>)
 8000324:	f023 0301 	bic.w	r3, r3, #1
 8000328:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800032a:	4b2f      	ldr	r3, [pc, #188]	@ (80003e8 <SystemClock_Config+0xf4>)
 800032c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	4b2d      	ldr	r3, [pc, #180]	@ (80003ec <SystemClock_Config+0xf8>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800033c:	4a2b      	ldr	r2, [pc, #172]	@ (80003ec <SystemClock_Config+0xf8>)
 800033e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b29      	ldr	r3, [pc, #164]	@ (80003ec <SystemClock_Config+0xf8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800034c:	603b      	str	r3, [r7, #0]
 800034e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000350:	bf00      	nop
 8000352:	4b26      	ldr	r3, [pc, #152]	@ (80003ec <SystemClock_Config+0xf8>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800035a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800035e:	d1f8      	bne.n	8000352 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	2302      	movs	r3, #2
 8000362:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000364:	2301      	movs	r3, #1
 8000366:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000368:	2340      	movs	r3, #64	@ 0x40
 800036a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000370:	2300      	movs	r3, #0
 8000372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000374:	2304      	movs	r3, #4
 8000376:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000378:	2309      	movs	r3, #9
 800037a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800037c:	2302      	movs	r3, #2
 800037e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000380:	2302      	movs	r3, #2
 8000382:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000384:	2302      	movs	r3, #2
 8000386:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000388:	230c      	movs	r3, #12
 800038a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800038c:	2302      	movs	r3, #2
 800038e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000390:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000394:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fe78 	bl	8001090 <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003a6:	f000 f89d 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	233f      	movs	r3, #63	@ 0x3f
 80003ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2101      	movs	r1, #1
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fab8 	bl	8001944 <HAL_RCC_ClockConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0xea>
  {
    Error_Handler();
 80003da:	f000 f883 	bl	80004e4 <Error_Handler>
  }
}
 80003de:	bf00      	nop
 80003e0:	3770      	adds	r7, #112	@ 0x70
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	58000400 	.word	0x58000400
 80003ec:	58024800 	.word	0x58024800

080003f0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80003f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 80003f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000434 <MX_SDMMC1_SD_Init+0x44>)
 80003f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80003fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000400:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000406:	4b0a      	ldr	r3, [pc, #40]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 8000408:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800040c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800040e:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 8000416:	2202      	movs	r2, #2
 8000418:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800041a:	4805      	ldr	r0, [pc, #20]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 800041c:	f004 fb06 	bl	8004a2c <HAL_SD_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000426:	f000 f85d 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	2400002c 	.word	0x2400002c
 8000434:	52007000 	.word	0x52007000

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043e:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <MX_GPIO_Init+0x50>)
 8000440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000444:	4a10      	ldr	r2, [pc, #64]	@ (8000488 <MX_GPIO_Init+0x50>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <MX_GPIO_Init+0x50>)
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b0a      	ldr	r3, [pc, #40]	@ (8000488 <MX_GPIO_Init+0x50>)
 800045e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000462:	4a09      	ldr	r2, [pc, #36]	@ (8000488 <MX_GPIO_Init+0x50>)
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_GPIO_Init+0x50>)
 800046e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000472:	f003 0308 	and.w	r3, r3, #8
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	58024400 	.word	0x58024400

0800048c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000492:	463b      	mov	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800049e:	f000 fb95 	bl	8000bcc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004a2:	2301      	movs	r3, #1
 80004a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004ae:	231f      	movs	r3, #31
 80004b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80004b2:	2387      	movs	r3, #135	@ 0x87
 80004b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004ba:	2300      	movs	r3, #0
 80004bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004be:	2301      	movs	r3, #1
 80004c0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80004c2:	2301      	movs	r3, #1
 80004c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004ce:	463b      	mov	r3, r7
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fbb3 	bl	8000c3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80004d6:	2004      	movs	r0, #4
 80004d8:	f000 fb90 	bl	8000bfc <HAL_MPU_Enable>

}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <Error_Handler+0x8>

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <HAL_MspInit+0x30>)
 80004f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80004fc:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <HAL_MspInit+0x30>)
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <HAL_MspInit+0x30>)
 8000508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800050c:	f003 0302 	and.w	r3, r3, #2
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	58024400 	.word	0x58024400

08000524 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b0bc      	sub	sp, #240	@ 0xf0
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	22c0      	movs	r2, #192	@ 0xc0
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f006 faab 	bl	8006aa0 <memset>
  if(hsd->Instance==SDMMC1)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a3c      	ldr	r2, [pc, #240]	@ (8000640 <HAL_SD_MspInit+0x11c>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d171      	bne.n	8000638 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000554:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000558:	f04f 0300 	mov.w	r3, #0
 800055c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000560:	2300      	movs	r3, #0
 8000562:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fd61 	bl	8002030 <HAL_RCCEx_PeriphCLKConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000574:	f7ff ffb6 	bl	80004e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000578:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <HAL_SD_MspInit+0x120>)
 800057a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800057e:	4a31      	ldr	r2, [pc, #196]	@ (8000644 <HAL_SD_MspInit+0x120>)
 8000580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000584:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000588:	4b2e      	ldr	r3, [pc, #184]	@ (8000644 <HAL_SD_MspInit+0x120>)
 800058a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800058e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <HAL_SD_MspInit+0x120>)
 8000598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800059c:	4a29      	ldr	r2, [pc, #164]	@ (8000644 <HAL_SD_MspInit+0x120>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005a6:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <HAL_SD_MspInit+0x120>)
 80005a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <HAL_SD_MspInit+0x120>)
 80005b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ba:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <HAL_SD_MspInit+0x120>)
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <HAL_SD_MspInit+0x120>)
 80005c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80005d2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80005d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80005ec:	230c      	movs	r3, #12
 80005ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005f6:	4619      	mov	r1, r3
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <HAL_SD_MspInit+0x124>)
 80005fa:	f000 fb5f 	bl	8000cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005fe:	2304      	movs	r3, #4
 8000600:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000616:	230c      	movs	r3, #12
 8000618:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800061c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000620:	4619      	mov	r1, r3
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <HAL_SD_MspInit+0x128>)
 8000624:	f000 fb4a 	bl	8000cbc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2031      	movs	r0, #49	@ 0x31
 800062e:	f000 fa98 	bl	8000b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000632:	2031      	movs	r0, #49	@ 0x31
 8000634:	f000 faaf 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000638:	bf00      	nop
 800063a:	37f0      	adds	r7, #240	@ 0xf0
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	52007000 	.word	0x52007000
 8000644:	58024400 	.word	0x58024400
 8000648:	58020800 	.word	0x58020800
 800064c:	58020c00 	.word	0x58020c00

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <NMI_Handler+0x4>

08000658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <MemManage_Handler+0x4>

08000668 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <UsageFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a6:	f000 f931 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80006b4:	4802      	ldr	r0, [pc, #8]	@ (80006c0 <SDMMC1_IRQHandler+0x10>)
 80006b6:	f004 fad9 	bl	8004c6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2400002c 	.word	0x2400002c

080006c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c8:	4b37      	ldr	r3, [pc, #220]	@ (80007a8 <SystemInit+0xe4>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ce:	4a36      	ldr	r2, [pc, #216]	@ (80007a8 <SystemInit+0xe4>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d8:	4b34      	ldr	r3, [pc, #208]	@ (80007ac <SystemInit+0xe8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d807      	bhi.n	80006f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e4:	4b31      	ldr	r3, [pc, #196]	@ (80007ac <SystemInit+0xe8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f023 030f 	bic.w	r3, r3, #15
 80006ec:	4a2f      	ldr	r2, [pc, #188]	@ (80007ac <SystemInit+0xe8>)
 80006ee:	f043 0307 	orr.w	r3, r3, #7
 80006f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f4:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <SystemInit+0xec>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a2d      	ldr	r2, [pc, #180]	@ (80007b0 <SystemInit+0xec>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000700:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <SystemInit+0xec>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000706:	4b2a      	ldr	r3, [pc, #168]	@ (80007b0 <SystemInit+0xec>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	4929      	ldr	r1, [pc, #164]	@ (80007b0 <SystemInit+0xec>)
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <SystemInit+0xf0>)
 800070e:	4013      	ands	r3, r2
 8000710:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000712:	4b26      	ldr	r3, [pc, #152]	@ (80007ac <SystemInit+0xe8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	2b00      	cmp	r3, #0
 800071c:	d007      	beq.n	800072e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071e:	4b23      	ldr	r3, [pc, #140]	@ (80007ac <SystemInit+0xe8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f023 030f 	bic.w	r3, r3, #15
 8000726:	4a21      	ldr	r2, [pc, #132]	@ (80007ac <SystemInit+0xe8>)
 8000728:	f043 0307 	orr.w	r3, r3, #7
 800072c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <SystemInit+0xec>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <SystemInit+0xec>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <SystemInit+0xec>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <SystemInit+0xec>)
 8000742:	4a1d      	ldr	r2, [pc, #116]	@ (80007b8 <SystemInit+0xf4>)
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <SystemInit+0xec>)
 8000748:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <SystemInit+0xf8>)
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <SystemInit+0xec>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <SystemInit+0xfc>)
 8000750:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <SystemInit+0xec>)
 8000754:	2200      	movs	r2, #0
 8000756:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <SystemInit+0xec>)
 800075a:	4a19      	ldr	r2, [pc, #100]	@ (80007c0 <SystemInit+0xfc>)
 800075c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <SystemInit+0xec>)
 8000760:	2200      	movs	r2, #0
 8000762:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <SystemInit+0xec>)
 8000766:	4a16      	ldr	r2, [pc, #88]	@ (80007c0 <SystemInit+0xfc>)
 8000768:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <SystemInit+0xec>)
 800076c:	2200      	movs	r2, #0
 800076e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <SystemInit+0xec>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <SystemInit+0xec>)
 8000776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <SystemInit+0xec>)
 800077e:	2200      	movs	r2, #0
 8000780:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <SystemInit+0x100>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <SystemInit+0x104>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <SystemInit+0x108>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <SystemInit+0x10c>)
 8000798:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800079c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00
 80007ac:	52002000 	.word	0x52002000
 80007b0:	58024400 	.word	0x58024400
 80007b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007b8:	02020200 	.word	0x02020200
 80007bc:	01ff0000 	.word	0x01ff0000
 80007c0:	01010280 	.word	0x01010280
 80007c4:	5c001000 	.word	0x5c001000
 80007c8:	ffff0000 	.word	0xffff0000
 80007cc:	51008108 	.word	0x51008108
 80007d0:	52004000 	.word	0x52004000

080007d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800080c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d8:	f7ff ff74 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	@ (8000814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f006 f955 	bl	8006ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000806:	f7ff fd67 	bl	80002d8 <main>
  bx  lr
 800080a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800080c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000810:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000814:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000818:	08006b28 	.word	0x08006b28
  ldr r2, =_sbss
 800081c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000820:	240000ac 	.word	0x240000ac

08000824 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC3_IRQHandler>
	...

08000828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082e:	2003      	movs	r0, #3
 8000830:	f000 f98c 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000834:	f001 fa3c 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8000838:	4602      	mov	r2, r0
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <HAL_Init+0x68>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	0a1b      	lsrs	r3, r3, #8
 8000840:	f003 030f 	and.w	r3, r3, #15
 8000844:	4913      	ldr	r1, [pc, #76]	@ (8000894 <HAL_Init+0x6c>)
 8000846:	5ccb      	ldrb	r3, [r1, r3]
 8000848:	f003 031f 	and.w	r3, r3, #31
 800084c:	fa22 f303 	lsr.w	r3, r2, r3
 8000850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <HAL_Init+0x68>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <HAL_Init+0x6c>)
 800085c:	5cd3      	ldrb	r3, [r2, r3]
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	fa22 f303 	lsr.w	r3, r2, r3
 8000868:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <HAL_Init+0x70>)
 800086a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800086c:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <HAL_Init+0x74>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000872:	200f      	movs	r0, #15
 8000874:	f000 f814 	bl	80008a0 <HAL_InitTick>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e002      	b.n	8000888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000882:	f7ff fe35 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58024400 	.word	0x58024400
 8000894:	08006b10 	.word	0x08006b10
 8000898:	24000004 	.word	0x24000004
 800089c:	24000000 	.word	0x24000000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_InitTick+0x60>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e021      	b.n	80008f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <HAL_InitTick+0x64>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <HAL_InitTick+0x60>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f971 	bl	8000bb2 <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f93b 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	@ (8000908 <HAL_InitTick+0x68>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2400000c 	.word	0x2400000c
 8000904:	24000000 	.word	0x24000000
 8000908:	24000008 	.word	0x24000008

0800090c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2400000c 	.word	0x2400000c
 8000930:	240000a8 	.word	0x240000a8

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	240000a8 	.word	0x240000a8

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff ffee 	bl	8000934 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffde 	bl	8000934 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2400000c 	.word	0x2400000c

08000994 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_GetREVID+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	0c1b      	lsrs	r3, r3, #16
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	5c001000 	.word	0x5c001000

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <__NVIC_SetPriorityGrouping+0x40>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <__NVIC_SetPriorityGrouping+0x40>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00
 80009f0:	05fa0000 	.word	0x05fa0000

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4907      	ldr	r1, [pc, #28]	@ (8000a48 <__NVIC_EnableIRQ+0x38>)
 8000a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff8e 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff29 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff40 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff90 	bl	8000aa0 <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5f 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff33 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa4 	bl	8000b08 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000bd0:	f3bf 8f5f 	dmb	sy
}
 8000bd4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <HAL_MPU_Disable+0x28>)
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bda:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <HAL_MPU_Disable+0x28>)
 8000bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000be0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_MPU_Disable+0x2c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	e000ed90 	.word	0xe000ed90

08000bfc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c04:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <HAL_MPU_Enable+0x38>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <HAL_MPU_Enable+0x3c>)
 8000c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c12:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <HAL_MPU_Enable+0x3c>)
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c18:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c1a:	f3bf 8f4f 	dsb	sy
}
 8000c1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c20:	f3bf 8f6f 	isb	sy
}
 8000c24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed90 	.word	0xe000ed90
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	785a      	ldrb	r2, [r3, #1]
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c52:	f023 0301 	bic.w	r3, r3, #1
 8000c56:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c58:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7b1b      	ldrb	r3, [r3, #12]
 8000c64:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7adb      	ldrb	r3, [r3, #11]
 8000c6a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7a9b      	ldrb	r3, [r3, #10]
 8000c72:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7b5b      	ldrb	r3, [r3, #13]
 8000c7a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7b9b      	ldrb	r3, [r3, #14]
 8000c82:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7bdb      	ldrb	r3, [r3, #15]
 8000c8a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7a5b      	ldrb	r3, [r3, #9]
 8000c92:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7a1b      	ldrb	r3, [r3, #8]
 8000c9a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c9c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ca6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca8:	6113      	str	r3, [r2, #16]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed90 	.word	0xe000ed90

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	@ 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cca:	4b89      	ldr	r3, [pc, #548]	@ (8000ef0 <HAL_GPIO_Init+0x234>)
 8000ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cce:	e194      	b.n	8000ffa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 8186 	beq.w	8000ff4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d005      	beq.n	8000d00 <HAL_GPIO_Init+0x44>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d130      	bne.n	8000d62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d36:	2201      	movs	r2, #1
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	f003 0201 	and.w	r2, r3, #1
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d017      	beq.n	8000d9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d123      	bne.n	8000df2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	69b9      	ldr	r1, [r7, #24]
 8000dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0203 	and.w	r2, r3, #3
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 80e0 	beq.w	8000ff4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <HAL_GPIO_Init+0x238>)
 8000e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef4 <HAL_GPIO_Init+0x238>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <HAL_GPIO_Init+0x238>)
 8000e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e52:	4a29      	ldr	r2, [pc, #164]	@ (8000ef8 <HAL_GPIO_Init+0x23c>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a20      	ldr	r2, [pc, #128]	@ (8000efc <HAL_GPIO_Init+0x240>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d052      	beq.n	8000f24 <HAL_GPIO_Init+0x268>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1f      	ldr	r2, [pc, #124]	@ (8000f00 <HAL_GPIO_Init+0x244>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d031      	beq.n	8000eea <HAL_GPIO_Init+0x22e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a1e      	ldr	r2, [pc, #120]	@ (8000f04 <HAL_GPIO_Init+0x248>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d02b      	beq.n	8000ee6 <HAL_GPIO_Init+0x22a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a1d      	ldr	r2, [pc, #116]	@ (8000f08 <HAL_GPIO_Init+0x24c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d025      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <HAL_GPIO_Init+0x250>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d01f      	beq.n	8000ede <HAL_GPIO_Init+0x222>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <HAL_GPIO_Init+0x254>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x21e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f14 <HAL_GPIO_Init+0x258>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x21a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	@ (8000f18 <HAL_GPIO_Init+0x25c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x216>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <HAL_GPIO_Init+0x260>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x212>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	@ (8000f20 <HAL_GPIO_Init+0x264>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x20e>
 8000ec6:	2309      	movs	r3, #9
 8000ec8:	e02d      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000eca:	230a      	movs	r3, #10
 8000ecc:	e02b      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ece:	2308      	movs	r3, #8
 8000ed0:	e029      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	e027      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	e025      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000eda:	2305      	movs	r3, #5
 8000edc:	e023      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e021      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e01f      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e01d      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e01b      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000eee:	bf00      	nop
 8000ef0:	58000080 	.word	0x58000080
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	58000400 	.word	0x58000400
 8000efc:	58020000 	.word	0x58020000
 8000f00:	58020400 	.word	0x58020400
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58020c00 	.word	0x58020c00
 8000f0c:	58021000 	.word	0x58021000
 8000f10:	58021400 	.word	0x58021400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021c00 	.word	0x58021c00
 8000f1c:	58022000 	.word	0x58022000
 8000f20:	58022400 	.word	0x58022400
 8000f24:	2300      	movs	r3, #0
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f36:	4938      	ldr	r1, [pc, #224]	@ (8001018 <HAL_GPIO_Init+0x35c>)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	f47f ae63 	bne.w	8000cd0 <HAL_GPIO_Init+0x14>
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3724      	adds	r7, #36	@ 0x24
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	58000400 	.word	0x58000400

0800101c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <HAL_PWREx_ConfigSupply+0x70>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b04      	cmp	r3, #4
 800102e:	d00a      	beq.n	8001046 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_PWREx_ConfigSupply+0x70>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	429a      	cmp	r2, r3
 800103c:	d001      	beq.n	8001042 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e01f      	b.n	8001082 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e01d      	b.n	8001082 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_PWREx_ConfigSupply+0x70>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f023 0207 	bic.w	r2, r3, #7
 800104e:	490f      	ldr	r1, [pc, #60]	@ (800108c <HAL_PWREx_ConfigSupply+0x70>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001056:	f7ff fc6d 	bl	8000934 <HAL_GetTick>
 800105a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800105c:	e009      	b.n	8001072 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800105e:	f7ff fc69 	bl	8000934 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800106c:	d901      	bls.n	8001072 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e007      	b.n	8001082 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_PWREx_ConfigSupply+0x70>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800107a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800107e:	d1ee      	bne.n	800105e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	58024800 	.word	0x58024800

08001090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	@ 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	f000 bc48 	b.w	8001934 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 8088 	beq.w	80011c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010b2:	4b99      	ldr	r3, [pc, #612]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010bc:	4b96      	ldr	r3, [pc, #600]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80010be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d007      	beq.n	80010d8 <HAL_RCC_OscConfig+0x48>
 80010c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ca:	2b18      	cmp	r3, #24
 80010cc:	d111      	bne.n	80010f2 <HAL_RCC_OscConfig+0x62>
 80010ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d10c      	bne.n	80010f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d06d      	beq.n	80011c0 <HAL_RCC_OscConfig+0x130>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d169      	bne.n	80011c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f000 bc21 	b.w	8001934 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010fa:	d106      	bne.n	800110a <HAL_RCC_OscConfig+0x7a>
 80010fc:	4b86      	ldr	r3, [pc, #536]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a85      	ldr	r2, [pc, #532]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	e02e      	b.n	8001168 <HAL_RCC_OscConfig+0xd8>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x9c>
 8001112:	4b81      	ldr	r3, [pc, #516]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a80      	ldr	r2, [pc, #512]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b7e      	ldr	r3, [pc, #504]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a7d      	ldr	r2, [pc, #500]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e01d      	b.n	8001168 <HAL_RCC_OscConfig+0xd8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0xc0>
 8001136:	4b78      	ldr	r3, [pc, #480]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a77      	ldr	r2, [pc, #476]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 800113c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b75      	ldr	r3, [pc, #468]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a74      	ldr	r2, [pc, #464]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e00b      	b.n	8001168 <HAL_RCC_OscConfig+0xd8>
 8001150:	4b71      	ldr	r3, [pc, #452]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a70      	ldr	r2, [pc, #448]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b6e      	ldr	r3, [pc, #440]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a6d      	ldr	r2, [pc, #436]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d013      	beq.n	8001198 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001170:	f7ff fbe0 	bl	8000934 <HAL_GetTick>
 8001174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fbdc 	bl	8000934 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	@ 0x64
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e3d4      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800118a:	4b63      	ldr	r3, [pc, #396]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0xe8>
 8001196:	e014      	b.n	80011c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001198:	f7ff fbcc 	bl	8000934 <HAL_GetTick>
 800119c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fbc8 	bl	8000934 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	@ 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e3c0      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011b2:	4b59      	ldr	r3, [pc, #356]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x110>
 80011be:	e000      	b.n	80011c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80ca 	beq.w	8001364 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d0:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011da:	4b4f      	ldr	r3, [pc, #316]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <HAL_RCC_OscConfig+0x166>
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	2b18      	cmp	r3, #24
 80011ea:	d156      	bne.n	800129a <HAL_RCC_OscConfig+0x20a>
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d151      	bne.n	800129a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f6:	4b48      	ldr	r3, [pc, #288]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x17e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e392      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800120e:	4b42      	ldr	r3, [pc, #264]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0219 	bic.w	r2, r3, #25
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	493f      	ldr	r1, [pc, #252]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fb88 	bl	8000934 <HAL_GetTick>
 8001224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fb84 	bl	8000934 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e37c      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800123a:	4b37      	ldr	r3, [pc, #220]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	f7ff fba5 	bl	8000994 <HAL_GetREVID>
 800124a:	4603      	mov	r3, r0
 800124c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001250:	4293      	cmp	r3, r2
 8001252:	d817      	bhi.n	8001284 <HAL_RCC_OscConfig+0x1f4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b40      	cmp	r3, #64	@ 0x40
 800125a:	d108      	bne.n	800126e <HAL_RCC_OscConfig+0x1de>
 800125c:	4b2e      	ldr	r3, [pc, #184]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001264:	4a2c      	ldr	r2, [pc, #176]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800126a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800126c:	e07a      	b.n	8001364 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	031b      	lsls	r3, r3, #12
 800127c:	4926      	ldr	r1, [pc, #152]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 800127e:	4313      	orrs	r3, r2
 8001280:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001282:	e06f      	b.n	8001364 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	061b      	lsls	r3, r3, #24
 8001292:	4921      	ldr	r1, [pc, #132]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001298:	e064      	b.n	8001364 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d047      	beq.n	8001332 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 0219 	bic.w	r2, r3, #25
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	491a      	ldr	r1, [pc, #104]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fb3e 	bl	8000934 <HAL_GetTick>
 80012b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fb3a 	bl	8000934 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e332      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	f7ff fb5b 	bl	8000994 <HAL_GetREVID>
 80012de:	4603      	mov	r3, r0
 80012e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d819      	bhi.n	800131c <HAL_RCC_OscConfig+0x28c>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b40      	cmp	r3, #64	@ 0x40
 80012ee:	d108      	bne.n	8001302 <HAL_RCC_OscConfig+0x272>
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80012f8:	4a07      	ldr	r2, [pc, #28]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fe:	6053      	str	r3, [r2, #4]
 8001300:	e030      	b.n	8001364 <HAL_RCC_OscConfig+0x2d4>
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	031b      	lsls	r3, r3, #12
 8001310:	4901      	ldr	r1, [pc, #4]	@ (8001318 <HAL_RCC_OscConfig+0x288>)
 8001312:	4313      	orrs	r3, r2
 8001314:	604b      	str	r3, [r1, #4]
 8001316:	e025      	b.n	8001364 <HAL_RCC_OscConfig+0x2d4>
 8001318:	58024400 	.word	0x58024400
 800131c:	4b9a      	ldr	r3, [pc, #616]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	061b      	lsls	r3, r3, #24
 800132a:	4997      	ldr	r1, [pc, #604]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
 8001330:	e018      	b.n	8001364 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b95      	ldr	r3, [pc, #596]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a94      	ldr	r2, [pc, #592]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff faf9 	bl	8000934 <HAL_GetTick>
 8001342:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff faf5 	bl	8000934 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e2ed      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001358:	4b8b      	ldr	r3, [pc, #556]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f0      	bne.n	8001346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80a9 	beq.w	80014c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001372:	4b85      	ldr	r3, [pc, #532]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800137a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800137c:	4b82      	ldr	r3, [pc, #520]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800137e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001380:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d007      	beq.n	8001398 <HAL_RCC_OscConfig+0x308>
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b18      	cmp	r3, #24
 800138c:	d13a      	bne.n	8001404 <HAL_RCC_OscConfig+0x374>
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d135      	bne.n	8001404 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001398:	4b7b      	ldr	r3, [pc, #492]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_OscConfig+0x320>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	2b80      	cmp	r3, #128	@ 0x80
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e2c1      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013b0:	f7ff faf0 	bl	8000994 <HAL_GetREVID>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d817      	bhi.n	80013ee <HAL_RCC_OscConfig+0x35e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d108      	bne.n	80013d8 <HAL_RCC_OscConfig+0x348>
 80013c6:	4b70      	ldr	r3, [pc, #448]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80013ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 80013d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013d6:	e075      	b.n	80014c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	069b      	lsls	r3, r3, #26
 80013e6:	4968      	ldr	r1, [pc, #416]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ec:	e06a      	b.n	80014c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013ee:	4b66      	ldr	r3, [pc, #408]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	061b      	lsls	r3, r3, #24
 80013fc:	4962      	ldr	r1, [pc, #392]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001402:	e05f      	b.n	80014c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d042      	beq.n	8001492 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800140c:	4b5e      	ldr	r3, [pc, #376]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a5d      	ldr	r2, [pc, #372]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fa8c 	bl	8000934 <HAL_GetTick>
 800141c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001420:	f7ff fa88 	bl	8000934 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e280      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001432:	4b55      	ldr	r3, [pc, #340]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800143e:	f7ff faa9 	bl	8000994 <HAL_GetREVID>
 8001442:	4603      	mov	r3, r0
 8001444:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001448:	4293      	cmp	r3, r2
 800144a:	d817      	bhi.n	800147c <HAL_RCC_OscConfig+0x3ec>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	2b20      	cmp	r3, #32
 8001452:	d108      	bne.n	8001466 <HAL_RCC_OscConfig+0x3d6>
 8001454:	4b4c      	ldr	r3, [pc, #304]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800145c:	4a4a      	ldr	r2, [pc, #296]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800145e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001462:	6053      	str	r3, [r2, #4]
 8001464:	e02e      	b.n	80014c4 <HAL_RCC_OscConfig+0x434>
 8001466:	4b48      	ldr	r3, [pc, #288]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	069b      	lsls	r3, r3, #26
 8001474:	4944      	ldr	r1, [pc, #272]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
 800147a:	e023      	b.n	80014c4 <HAL_RCC_OscConfig+0x434>
 800147c:	4b42      	ldr	r3, [pc, #264]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	493f      	ldr	r1, [pc, #252]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800148c:	4313      	orrs	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
 8001490:	e018      	b.n	80014c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001492:	4b3d      	ldr	r3, [pc, #244]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a3c      	ldr	r2, [pc, #240]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800149c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fa49 	bl	8000934 <HAL_GetTick>
 80014a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014a6:	f7ff fa45 	bl	8000934 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e23d      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014b8:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d036      	beq.n	800153e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d019      	beq.n	800150c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fa26 	bl	8000934 <HAL_GetTick>
 80014e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fa22 	bl	8000934 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e21a      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014fe:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x45c>
 800150a:	e018      	b.n	800153e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150c:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff fa0c 	bl	8000934 <HAL_GetTick>
 800151c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fa08 	bl	8000934 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e200      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	2b00      	cmp	r3, #0
 8001548:	d039      	beq.n	80015be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d01c      	beq.n	800158c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001558:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800155c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800155e:	f7ff f9e9 	bl	8000934 <HAL_GetTick>
 8001562:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001566:	f7ff f9e5 	bl	8000934 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e1dd      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x4d6>
 8001584:	e01b      	b.n	80015be <HAL_RCC_OscConfig+0x52e>
 8001586:	bf00      	nop
 8001588:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800158c:	4b9b      	ldr	r3, [pc, #620]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a9a      	ldr	r2, [pc, #616]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001592:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001596:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001598:	f7ff f9cc 	bl	8000934 <HAL_GetTick>
 800159c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015a0:	f7ff f9c8 	bl	8000934 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1c0      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015b2:	4b92      	ldr	r3, [pc, #584]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8081 	beq.w	80016ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001800 <HAL_RCC_OscConfig+0x770>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a8b      	ldr	r2, [pc, #556]	@ (8001800 <HAL_RCC_OscConfig+0x770>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015d8:	f7ff f9ac 	bl	8000934 <HAL_GetTick>
 80015dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e0:	f7ff f9a8 	bl	8000934 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	@ 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1a0      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015f2:	4b83      	ldr	r3, [pc, #524]	@ (8001800 <HAL_RCC_OscConfig+0x770>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d106      	bne.n	8001614 <HAL_RCC_OscConfig+0x584>
 8001606:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160a:	4a7c      	ldr	r2, [pc, #496]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6713      	str	r3, [r2, #112]	@ 0x70
 8001612:	e02d      	b.n	8001670 <HAL_RCC_OscConfig+0x5e0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x5a6>
 800161c:	4b77      	ldr	r3, [pc, #476]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001620:	4a76      	ldr	r2, [pc, #472]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	@ 0x70
 8001628:	4b74      	ldr	r3, [pc, #464]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162c:	4a73      	ldr	r2, [pc, #460]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800162e:	f023 0304 	bic.w	r3, r3, #4
 8001632:	6713      	str	r3, [r2, #112]	@ 0x70
 8001634:	e01c      	b.n	8001670 <HAL_RCC_OscConfig+0x5e0>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x5c8>
 800163e:	4b6f      	ldr	r3, [pc, #444]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001642:	4a6e      	ldr	r2, [pc, #440]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6713      	str	r3, [r2, #112]	@ 0x70
 800164a:	4b6c      	ldr	r3, [pc, #432]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164e:	4a6b      	ldr	r2, [pc, #428]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6713      	str	r3, [r2, #112]	@ 0x70
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x5e0>
 8001658:	4b68      	ldr	r3, [pc, #416]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165c:	4a67      	ldr	r2, [pc, #412]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6713      	str	r3, [r2, #112]	@ 0x70
 8001664:	4b65      	ldr	r3, [pc, #404]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001668:	4a64      	ldr	r2, [pc, #400]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800166a:	f023 0304 	bic.w	r3, r3, #4
 800166e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d015      	beq.n	80016a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff f95c 	bl	8000934 <HAL_GetTick>
 800167c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff f958 	bl	8000934 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e14e      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001696:	4b59      	ldr	r3, [pc, #356]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0ee      	beq.n	8001680 <HAL_RCC_OscConfig+0x5f0>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff f946 	bl	8000934 <HAL_GetTick>
 80016a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff f942 	bl	8000934 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e138      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016c2:	4b4e      	ldr	r3, [pc, #312]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ee      	bne.n	80016ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 812d 	beq.w	8001932 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016d8:	4b48      	ldr	r3, [pc, #288]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016e0:	2b18      	cmp	r3, #24
 80016e2:	f000 80bd 	beq.w	8001860 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	f040 809e 	bne.w	800182c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f0:	4b42      	ldr	r3, [pc, #264]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a41      	ldr	r2, [pc, #260]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80016f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff f91a 	bl	8000934 <HAL_GetTick>
 8001700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff f916 	bl	8000934 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e10e      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001716:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001722:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001726:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <HAL_RCC_OscConfig+0x774>)
 8001728:	4013      	ands	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	430a      	orrs	r2, r1
 8001736:	4931      	ldr	r1, [pc, #196]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001738:	4313      	orrs	r3, r2
 800173a:	628b      	str	r3, [r1, #40]	@ 0x28
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001740:	3b01      	subs	r3, #1
 8001742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174a:	3b01      	subs	r3, #1
 800174c:	025b      	lsls	r3, r3, #9
 800174e:	b29b      	uxth	r3, r3
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001756:	3b01      	subs	r3, #1
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001764:	3b01      	subs	r3, #1
 8001766:	061b      	lsls	r3, r3, #24
 8001768:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800176c:	4923      	ldr	r1, [pc, #140]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800176e:	4313      	orrs	r3, r2
 8001770:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001772:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001776:	4a21      	ldr	r2, [pc, #132]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <HAL_RCC_OscConfig+0x778>)
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800178a:	00d2      	lsls	r2, r2, #3
 800178c:	491b      	ldr	r1, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 800178e:	4313      	orrs	r3, r2
 8001790:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 8001794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001796:	f023 020c 	bic.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	4917      	ldr	r1, [pc, #92]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	f023 0202 	bic.w	r2, r3, #2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b0:	4912      	ldr	r1, [pc, #72]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	4a10      	ldr	r2, [pc, #64]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c6:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017ce:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017de:	4a07      	ldr	r2, [pc, #28]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e6:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <HAL_RCC_OscConfig+0x76c>)
 80017ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff f89f 	bl	8000934 <HAL_GetTick>
 80017f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017f8:	e011      	b.n	800181e <HAL_RCC_OscConfig+0x78e>
 80017fa:	bf00      	nop
 80017fc:	58024400 	.word	0x58024400
 8001800:	58024800 	.word	0x58024800
 8001804:	fffffc0c 	.word	0xfffffc0c
 8001808:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f892 	bl	8000934 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e08a      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x77c>
 800182a:	e082      	b.n	8001932 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182c:	4b43      	ldr	r3, [pc, #268]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a42      	ldr	r2, [pc, #264]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 8001832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff f87c 	bl	8000934 <HAL_GetTick>
 800183c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f878 	bl	8000934 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e070      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001852:	4b3a      	ldr	r3, [pc, #232]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x7b0>
 800185e:	e068      	b.n	8001932 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001860:	4b36      	ldr	r3, [pc, #216]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001866:	4b35      	ldr	r3, [pc, #212]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	2b01      	cmp	r3, #1
 8001872:	d031      	beq.n	80018d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f003 0203 	and.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d12a      	bne.n	80018d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d122      	bne.n	80018d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11a      	bne.n	80018d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	0a5b      	lsrs	r3, r3, #9
 80018a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d111      	bne.n	80018d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	0c1b      	lsrs	r3, r3, #16
 80018b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d108      	bne.n	80018d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	0e1b      	lsrs	r3, r3, #24
 80018ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e02b      	b.n	8001934 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 80018de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d01f      	beq.n	8001932 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	4a11      	ldr	r2, [pc, #68]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018fe:	f7ff f819 	bl	8000934 <HAL_GetTick>
 8001902:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001904:	bf00      	nop
 8001906:	f7ff f815 	bl	8000934 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	4293      	cmp	r3, r2
 8001910:	d0f9      	beq.n	8001906 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 8001914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <HAL_RCC_OscConfig+0x8b0>)
 8001918:	4013      	ands	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800191e:	00d2      	lsls	r2, r2, #3
 8001920:	4906      	ldr	r1, [pc, #24]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 8001922:	4313      	orrs	r3, r2
 8001924:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	4a04      	ldr	r2, [pc, #16]	@ (800193c <HAL_RCC_OscConfig+0x8ac>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3730      	adds	r7, #48	@ 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58024400 	.word	0x58024400
 8001940:	ffff0007 	.word	0xffff0007

08001944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e19c      	b.n	8001c92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b8a      	ldr	r3, [pc, #552]	@ (8001b84 <HAL_RCC_ClockConfig+0x240>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b87      	ldr	r3, [pc, #540]	@ (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 020f 	bic.w	r2, r3, #15
 800196e:	4985      	ldr	r1, [pc, #532]	@ (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b83      	ldr	r3, [pc, #524]	@ (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e184      	b.n	8001c92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d010      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	4b7b      	ldr	r3, [pc, #492]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d908      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019a4:	4b78      	ldr	r3, [pc, #480]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	4975      	ldr	r1, [pc, #468]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d010      	beq.n	80019e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	4b70      	ldr	r3, [pc, #448]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d908      	bls.n	80019e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	496a      	ldr	r1, [pc, #424]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d010      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699a      	ldr	r2, [r3, #24]
 80019f4:	4b64      	ldr	r3, [pc, #400]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d908      	bls.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a00:	4b61      	ldr	r3, [pc, #388]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	495e      	ldr	r1, [pc, #376]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d010      	beq.n	8001a40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	4b59      	ldr	r3, [pc, #356]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d908      	bls.n	8001a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a2e:	4b56      	ldr	r3, [pc, #344]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4953      	ldr	r1, [pc, #332]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d010      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4b4d      	ldr	r3, [pc, #308]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d908      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f023 020f 	bic.w	r2, r3, #15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4947      	ldr	r1, [pc, #284]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d055      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a7a:	4b43      	ldr	r3, [pc, #268]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4940      	ldr	r1, [pc, #256]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a94:	4b3c      	ldr	r3, [pc, #240]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d121      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0f6      	b.n	8001c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aac:	4b36      	ldr	r3, [pc, #216]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d115      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0ea      	b.n	8001c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ac4:	4b30      	ldr	r3, [pc, #192]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0de      	b.n	8001c92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0d6      	b.n	8001c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae4:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	f023 0207 	bic.w	r2, r3, #7
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4925      	ldr	r1, [pc, #148]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af6:	f7fe ff1d 	bl	8000934 <HAL_GetTick>
 8001afa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afe:	f7fe ff19 	bl	8000934 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0be      	b.n	8001c92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b14:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d1eb      	bne.n	8001afe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d010      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d208      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f023 020f 	bic.w	r2, r3, #15
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	490e      	ldr	r1, [pc, #56]	@ (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d214      	bcs.n	8001b8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 020f 	bic.w	r2, r3, #15
 8001b6a:	4906      	ldr	r1, [pc, #24]	@ (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e086      	b.n	8001c92 <HAL_RCC_ClockConfig+0x34e>
 8001b84:	52002000 	.word	0x52002000
 8001b88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d010      	beq.n	8001bba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d208      	bcs.n	8001bba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	4939      	ldr	r1, [pc, #228]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d010      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	4b34      	ldr	r3, [pc, #208]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d208      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bd6:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	492e      	ldr	r1, [pc, #184]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d010      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d208      	bcs.n	8001c16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c04:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4922      	ldr	r1, [pc, #136]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d010      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d208      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4917      	ldr	r1, [pc, #92]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c44:	f000 f834 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	4912      	ldr	r1, [pc, #72]	@ (8001ca0 <HAL_RCC_ClockConfig+0x35c>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <HAL_RCC_ClockConfig+0x358>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca0 <HAL_RCC_ClockConfig+0x35c>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_RCC_ClockConfig+0x360>)
 8001c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <HAL_RCC_ClockConfig+0x364>)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_RCC_ClockConfig+0x368>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fe0a 	bl	80008a0 <HAL_InitTick>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	08006b10 	.word	0x08006b10
 8001ca4:	24000004 	.word	0x24000004
 8001ca8:	24000000 	.word	0x24000000
 8001cac:	24000008 	.word	0x24000008

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb6:	4bb3      	ldr	r3, [pc, #716]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cbe:	2b18      	cmp	r3, #24
 8001cc0:	f200 8155 	bhi.w	8001f6e <HAL_RCC_GetSysClockFreq+0x2be>
 8001cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ccc <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001d31 	.word	0x08001d31
 8001cd0:	08001f6f 	.word	0x08001f6f
 8001cd4:	08001f6f 	.word	0x08001f6f
 8001cd8:	08001f6f 	.word	0x08001f6f
 8001cdc:	08001f6f 	.word	0x08001f6f
 8001ce0:	08001f6f 	.word	0x08001f6f
 8001ce4:	08001f6f 	.word	0x08001f6f
 8001ce8:	08001f6f 	.word	0x08001f6f
 8001cec:	08001d57 	.word	0x08001d57
 8001cf0:	08001f6f 	.word	0x08001f6f
 8001cf4:	08001f6f 	.word	0x08001f6f
 8001cf8:	08001f6f 	.word	0x08001f6f
 8001cfc:	08001f6f 	.word	0x08001f6f
 8001d00:	08001f6f 	.word	0x08001f6f
 8001d04:	08001f6f 	.word	0x08001f6f
 8001d08:	08001f6f 	.word	0x08001f6f
 8001d0c:	08001d5d 	.word	0x08001d5d
 8001d10:	08001f6f 	.word	0x08001f6f
 8001d14:	08001f6f 	.word	0x08001f6f
 8001d18:	08001f6f 	.word	0x08001f6f
 8001d1c:	08001f6f 	.word	0x08001f6f
 8001d20:	08001f6f 	.word	0x08001f6f
 8001d24:	08001f6f 	.word	0x08001f6f
 8001d28:	08001f6f 	.word	0x08001f6f
 8001d2c:	08001d63 	.word	0x08001d63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d30:	4b94      	ldr	r3, [pc, #592]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d3c:	4b91      	ldr	r3, [pc, #580]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	08db      	lsrs	r3, r3, #3
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	4a90      	ldr	r2, [pc, #576]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d4e:	e111      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d50:	4b8d      	ldr	r3, [pc, #564]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d52:	61bb      	str	r3, [r7, #24]
      break;
 8001d54:	e10e      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d56:	4b8d      	ldr	r3, [pc, #564]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d58:	61bb      	str	r3, [r7, #24]
      break;
 8001d5a:	e10b      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d5e:	61bb      	str	r3, [r7, #24]
      break;
 8001d60:	e108      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d62:	4b88      	ldr	r3, [pc, #544]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d6c:	4b85      	ldr	r3, [pc, #532]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d78:	4b82      	ldr	r3, [pc, #520]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d82:	4b80      	ldr	r3, [pc, #512]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d86:	08db      	lsrs	r3, r3, #3
 8001d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80e1 	beq.w	8001f68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	f000 8083 	beq.w	8001eb4 <HAL_RCC_GetSysClockFreq+0x204>
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	f200 80a1 	bhi.w	8001ef8 <HAL_RCC_GetSysClockFreq+0x248>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x114>
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d056      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001dc2:	e099      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d02d      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	4a6b      	ldr	r2, [pc, #428]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dfa:	4b62      	ldr	r3, [pc, #392]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001e2a:	e087      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001f98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e3e:	4b51      	ldr	r3, [pc, #324]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e6e:	e065      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e82:	4b40      	ldr	r3, [pc, #256]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001eb2:	e043      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ebe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001fa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ef6:	e021      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	0a5b      	lsrs	r3, r3, #9
 8001f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f46:	3301      	adds	r3, #1
 8001f48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f60:	ee17 3a90 	vmov	r3, s15
 8001f64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f66:	e005      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
      break;
 8001f6c:	e002      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f70:	61bb      	str	r3, [r7, #24]
      break;
 8001f72:	bf00      	nop
  }

  return sysclockfreq;
 8001f74:	69bb      	ldr	r3, [r7, #24]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	58024400 	.word	0x58024400
 8001f88:	03d09000 	.word	0x03d09000
 8001f8c:	003d0900 	.word	0x003d0900
 8001f90:	017d7840 	.word	0x017d7840
 8001f94:	46000000 	.word	0x46000000
 8001f98:	4c742400 	.word	0x4c742400
 8001f9c:	4a742400 	.word	0x4a742400
 8001fa0:	4bbebc20 	.word	0x4bbebc20

08001fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001faa:	f7ff fe81 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	490f      	ldr	r1, [pc, #60]	@ (8001ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8001fe0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fe2:	4a07      	ldr	r2, [pc, #28]	@ (8002000 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	08006b10 	.word	0x08006b10
 8001ffc:	24000004 	.word	0x24000004
 8002000:	24000000 	.word	0x24000000

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002008:	f7ff ffcc 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4904      	ldr	r1, [pc, #16]	@ (800202c <HAL_RCC_GetPCLK1Freq+0x28>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	58024400 	.word	0x58024400
 800202c:	08006b10 	.word	0x08006b10

08002030 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002034:	b0ca      	sub	sp, #296	@ 0x128
 8002036:	af00      	add	r7, sp, #0
 8002038:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002054:	2500      	movs	r5, #0
 8002056:	ea54 0305 	orrs.w	r3, r4, r5
 800205a:	d049      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800205c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002062:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002066:	d02f      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002068:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800206c:	d828      	bhi.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800206e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002072:	d01a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002078:	d822      	bhi.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800207e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002082:	d007      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002084:	e01c      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002086:	4bb8      	ldr	r3, [pc, #736]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	4ab7      	ldr	r2, [pc, #732]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800208c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002092:	e01a      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002098:	3308      	adds	r3, #8
 800209a:	2102      	movs	r1, #2
 800209c:	4618      	mov	r0, r3
 800209e:	f002 fb61 	bl	8004764 <RCCEx_PLL2_Config>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80020a8:	e00f      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80020aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020ae:	3328      	adds	r3, #40	@ 0x28
 80020b0:	2102      	movs	r1, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fc08 	bl	80048c8 <RCCEx_PLL3_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80020be:	e004      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80020c6:	e000      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80020c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80020ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10a      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80020d2:	4ba5      	ldr	r3, [pc, #660]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80020da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020e0:	4aa1      	ldr	r2, [pc, #644]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020e2:	430b      	orrs	r3, r1
 80020e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80020e6:	e003      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80020ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80020fc:	f04f 0900 	mov.w	r9, #0
 8002100:	ea58 0309 	orrs.w	r3, r8, r9
 8002104:	d047      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	2b04      	cmp	r3, #4
 800210e:	d82a      	bhi.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002110:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	0800212d 	.word	0x0800212d
 800211c:	0800213b 	.word	0x0800213b
 8002120:	08002151 	.word	0x08002151
 8002124:	0800216f 	.word	0x0800216f
 8002128:	0800216f 	.word	0x0800216f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800212c:	4b8e      	ldr	r3, [pc, #568]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002130:	4a8d      	ldr	r2, [pc, #564]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002138:	e01a      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800213a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800213e:	3308      	adds	r3, #8
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fb0e 	bl	8004764 <RCCEx_PLL2_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800214e:	e00f      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002154:	3328      	adds	r3, #40	@ 0x28
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fbb5 	bl	80048c8 <RCCEx_PLL3_Config>
 800215e:	4603      	mov	r3, r0
 8002160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002164:	e004      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800216c:	e000      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800216e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10a      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002178:	4b7b      	ldr	r3, [pc, #492]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800217a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217c:	f023 0107 	bic.w	r1, r3, #7
 8002180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	4a78      	ldr	r2, [pc, #480]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002188:	430b      	orrs	r3, r1
 800218a:	6513      	str	r3, [r2, #80]	@ 0x50
 800218c:	e003      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800218e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80021a2:	f04f 0b00 	mov.w	fp, #0
 80021a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80021aa:	d04c      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80021ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021b6:	d030      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80021b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021bc:	d829      	bhi.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80021be:	2bc0      	cmp	r3, #192	@ 0xc0
 80021c0:	d02d      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80021c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80021c4:	d825      	bhi.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80021c6:	2b80      	cmp	r3, #128	@ 0x80
 80021c8:	d018      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80021ca:	2b80      	cmp	r3, #128	@ 0x80
 80021cc:	d821      	bhi.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80021d2:	2b40      	cmp	r3, #64	@ 0x40
 80021d4:	d007      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80021d6:	e01c      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021d8:	4b63      	ldr	r3, [pc, #396]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	4a62      	ldr	r2, [pc, #392]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80021e4:	e01c      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021ea:	3308      	adds	r3, #8
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 fab8 	bl	8004764 <RCCEx_PLL2_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80021fa:	e011      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002200:	3328      	adds	r3, #40	@ 0x28
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f002 fb5f 	bl	80048c8 <RCCEx_PLL3_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002210:	e006      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002218:	e002      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800221a:	bf00      	nop
 800221c:	e000      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800221e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002228:	4b4f      	ldr	r3, [pc, #316]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800222a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	4a4c      	ldr	r2, [pc, #304]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002238:	430b      	orrs	r3, r1
 800223a:	6513      	str	r3, [r2, #80]	@ 0x50
 800223c:	e003      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800223e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002252:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800225c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002260:	460b      	mov	r3, r1
 8002262:	4313      	orrs	r3, r2
 8002264:	d053      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800226a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800226e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002272:	d035      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002274:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002278:	d82e      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800227a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800227e:	d031      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002280:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002284:	d828      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800228a:	d01a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800228c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002290:	d822      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800229a:	d007      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800229c:	e01c      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800229e:	4b32      	ldr	r3, [pc, #200]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	4a31      	ldr	r2, [pc, #196]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022aa:	e01c      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022b0:	3308      	adds	r3, #8
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fa55 	bl	8004764 <RCCEx_PLL2_Config>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80022c0:	e011      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022c6:	3328      	adds	r3, #40	@ 0x28
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fafc 	bl	80048c8 <RCCEx_PLL3_Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022d6:	e006      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80022de:	e002      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80022e0:	bf00      	nop
 80022e2:	e000      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80022e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10b      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80022ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80022f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002300:	430b      	orrs	r3, r1
 8002302:	6593      	str	r3, [r2, #88]	@ 0x58
 8002304:	e003      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800230a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800230e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800231a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002324:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002328:	460b      	mov	r3, r1
 800232a:	4313      	orrs	r3, r2
 800232c:	d056      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800232e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002336:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800233a:	d038      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800233c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002340:	d831      	bhi.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002342:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002346:	d034      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002348:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800234c:	d82b      	bhi.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800234e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002352:	d01d      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002358:	d825      	bhi.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800235e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002364:	e01f      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002366:	bf00      	nop
 8002368:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800236c:	4ba2      	ldr	r3, [pc, #648]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	4aa1      	ldr	r2, [pc, #644]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002378:	e01c      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800237a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800237e:	3308      	adds	r3, #8
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f002 f9ee 	bl	8004764 <RCCEx_PLL2_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800238e:	e011      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002394:	3328      	adds	r3, #40	@ 0x28
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f002 fa95 	bl	80048c8 <RCCEx_PLL3_Config>
 800239e:	4603      	mov	r3, r0
 80023a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023a4:	e006      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80023ac:	e002      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80023ae:	bf00      	nop
 80023b0:	e000      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80023b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80023bc:	4b8e      	ldr	r3, [pc, #568]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80023c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80023cc:	4a8a      	ldr	r2, [pc, #552]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023ce:	430b      	orrs	r3, r1
 80023d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d2:	e003      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80023e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80023f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80023f6:	460b      	mov	r3, r1
 80023f8:	4313      	orrs	r3, r2
 80023fa:	d03a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80023fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002402:	2b30      	cmp	r3, #48	@ 0x30
 8002404:	d01f      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002406:	2b30      	cmp	r3, #48	@ 0x30
 8002408:	d819      	bhi.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800240a:	2b20      	cmp	r3, #32
 800240c:	d00c      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800240e:	2b20      	cmp	r3, #32
 8002410:	d815      	bhi.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d019      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002416:	2b10      	cmp	r3, #16
 8002418:	d111      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800241a:	4b77      	ldr	r3, [pc, #476]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	4a76      	ldr	r2, [pc, #472]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002426:	e011      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800242c:	3308      	adds	r3, #8
 800242e:	2102      	movs	r1, #2
 8002430:	4618      	mov	r0, r3
 8002432:	f002 f997 	bl	8004764 <RCCEx_PLL2_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800243c:	e006      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002444:	e002      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800244a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800244c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002454:	4b68      	ldr	r3, [pc, #416]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002458:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800245c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	4a65      	ldr	r2, [pc, #404]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002464:	430b      	orrs	r3, r1
 8002466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002468:	e003      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800246a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800246e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800247e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002488:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800248c:	460b      	mov	r3, r1
 800248e:	4313      	orrs	r3, r2
 8002490:	d051      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800249c:	d035      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800249e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024a2:	d82e      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80024a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80024a8:	d031      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80024aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80024ae:	d828      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80024b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024b4:	d01a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ba:	d822      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80024c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c4:	d007      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80024c6:	e01c      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024c8:	4b4b      	ldr	r3, [pc, #300]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	4a4a      	ldr	r2, [pc, #296]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80024d4:	e01c      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024da:	3308      	adds	r3, #8
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f002 f940 	bl	8004764 <RCCEx_PLL2_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80024ea:	e011      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024f0:	3328      	adds	r3, #40	@ 0x28
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 f9e7 	bl	80048c8 <RCCEx_PLL3_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002500:	e006      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002508:	e002      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800250e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002518:	4b37      	ldr	r3, [pc, #220]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800251a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002526:	4a34      	ldr	r2, [pc, #208]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002528:	430b      	orrs	r3, r1
 800252a:	6513      	str	r3, [r2, #80]	@ 0x50
 800252c:	e003      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800254c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002550:	460b      	mov	r3, r1
 8002552:	4313      	orrs	r3, r2
 8002554:	d056      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800255a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002560:	d033      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002562:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002566:	d82c      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002568:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800256c:	d02f      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800256e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002572:	d826      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002574:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002578:	d02b      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800257a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800257e:	d820      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002584:	d012      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800258a:	d81a      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d022      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002594:	d115      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800259a:	3308      	adds	r3, #8
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 f8e0 	bl	8004764 <RCCEx_PLL2_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80025aa:	e015      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80025ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025b0:	3328      	adds	r3, #40	@ 0x28
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 f987 	bl	80048c8 <RCCEx_PLL3_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80025c0:	e00a      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025c8:	e006      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80025ca:	bf00      	nop
 80025cc:	e004      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80025ce:	bf00      	nop
 80025d0:	e002      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80025d2:	bf00      	nop
 80025d4:	e000      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80025d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80025e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025ee:	4a02      	ldr	r2, [pc, #8]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80025f4:	e006      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80025f6:	bf00      	nop
 80025f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800261a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800261e:	460b      	mov	r3, r1
 8002620:	4313      	orrs	r3, r2
 8002622:	d055      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800262c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002630:	d033      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002636:	d82c      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800263c:	d02f      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800263e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002642:	d826      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002644:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002648:	d02b      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800264a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800264e:	d820      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002654:	d012      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800265a:	d81a      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800265c:	2b00      	cmp	r3, #0
 800265e:	d022      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002664:	d115      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800266a:	3308      	adds	r3, #8
 800266c:	2101      	movs	r1, #1
 800266e:	4618      	mov	r0, r3
 8002670:	f002 f878 	bl	8004764 <RCCEx_PLL2_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800267a:	e015      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800267c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002680:	3328      	adds	r3, #40	@ 0x28
 8002682:	2101      	movs	r1, #1
 8002684:	4618      	mov	r0, r3
 8002686:	f002 f91f 	bl	80048c8 <RCCEx_PLL3_Config>
 800268a:	4603      	mov	r3, r0
 800268c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002690:	e00a      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002698:	e006      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800269a:	bf00      	nop
 800269c:	e004      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10b      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80026b0:	4ba3      	ldr	r3, [pc, #652]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80026b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80026c0:	4a9f      	ldr	r2, [pc, #636]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026c2:	430b      	orrs	r3, r1
 80026c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026c6:	e003      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80026dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80026e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026ea:	460b      	mov	r3, r1
 80026ec:	4313      	orrs	r3, r2
 80026ee:	d037      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80026f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026fa:	d00e      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80026fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002700:	d816      	bhi.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d018      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800270a:	d111      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800270c:	4b8c      	ldr	r3, [pc, #560]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	4a8b      	ldr	r2, [pc, #556]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002718:	e00f      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800271a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800271e:	3308      	adds	r3, #8
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f002 f81e 	bl	8004764 <RCCEx_PLL2_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800272e:	e004      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002736:	e000      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800273a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002742:	4b7f      	ldr	r3, [pc, #508]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002746:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800274a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	4a7b      	ldr	r2, [pc, #492]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002752:	430b      	orrs	r3, r1
 8002754:	6513      	str	r3, [r2, #80]	@ 0x50
 8002756:	e003      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800275c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800276c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002776:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800277a:	460b      	mov	r3, r1
 800277c:	4313      	orrs	r3, r2
 800277e:	d039      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002786:	2b03      	cmp	r3, #3
 8002788:	d81c      	bhi.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800278a:	a201      	add	r2, pc, #4	@ (adr r2, 8002790 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027cd 	.word	0x080027cd
 8002794:	080027a1 	.word	0x080027a1
 8002798:	080027af 	.word	0x080027af
 800279c:	080027cd 	.word	0x080027cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a0:	4b67      	ldr	r3, [pc, #412]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	4a66      	ldr	r2, [pc, #408]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80027ac:	e00f      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027b2:	3308      	adds	r3, #8
 80027b4:	2102      	movs	r1, #2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 ffd4 	bl	8004764 <RCCEx_PLL2_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80027c2:	e004      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027ca:	e000      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80027cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80027d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027da:	f023 0103 	bic.w	r1, r3, #3
 80027de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e4:	4a56      	ldr	r2, [pc, #344]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027e6:	430b      	orrs	r3, r1
 80027e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ea:	e003      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002800:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800280a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800280e:	460b      	mov	r3, r1
 8002810:	4313      	orrs	r3, r2
 8002812:	f000 809f 	beq.w	8002954 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002816:	4b4b      	ldr	r3, [pc, #300]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4a      	ldr	r2, [pc, #296]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002822:	f7fe f887 	bl	8000934 <HAL_GetTick>
 8002826:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800282a:	e00b      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282c:	f7fe f882 	bl	8000934 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b64      	cmp	r3, #100	@ 0x64
 800283a:	d903      	bls.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002842:	e005      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002844:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ed      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002854:	2b00      	cmp	r3, #0
 8002856:	d179      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002858:	4b39      	ldr	r3, [pc, #228]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800285a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800285c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002860:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002864:	4053      	eors	r3, r2
 8002866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800286a:	2b00      	cmp	r3, #0
 800286c:	d015      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800286e:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002876:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800287a:	4b31      	ldr	r3, [pc, #196]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	4a30      	ldr	r2, [pc, #192]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002886:	4b2e      	ldr	r3, [pc, #184]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288a:	4a2d      	ldr	r2, [pc, #180]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002890:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002892:	4a2b      	ldr	r2, [pc, #172]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002894:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002898:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800289a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a6:	d118      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe f844 	bl	8000934 <HAL_GetTick>
 80028ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028b0:	e00d      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe f83f 	bl	8000934 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80028bc:	1ad2      	subs	r2, r2, r3
 80028be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d903      	bls.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80028cc:	e005      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0eb      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80028da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d129      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028f2:	d10e      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002904:	091a      	lsrs	r2, r3, #4
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002908:	4013      	ands	r3, r2
 800290a:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800290c:	430b      	orrs	r3, r1
 800290e:	6113      	str	r3, [r2, #16]
 8002910:	e005      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002918:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800291c:	6113      	str	r3, [r2, #16]
 800291e:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002920:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800292a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292e:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002930:	430b      	orrs	r3, r1
 8002932:	6713      	str	r3, [r2, #112]	@ 0x70
 8002934:	e00e      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800293a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800293e:	e009      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002940:	58024400 	.word	0x58024400
 8002944:	58024800 	.word	0x58024800
 8002948:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	f002 0301 	and.w	r3, r2, #1
 8002960:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002964:	2300      	movs	r3, #0
 8002966:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800296a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800296e:	460b      	mov	r3, r1
 8002970:	4313      	orrs	r3, r2
 8002972:	f000 8089 	beq.w	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800297a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800297c:	2b28      	cmp	r3, #40	@ 0x28
 800297e:	d86b      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002980:	a201      	add	r2, pc, #4	@ (adr r2, 8002988 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	08002a61 	.word	0x08002a61
 800298c:	08002a59 	.word	0x08002a59
 8002990:	08002a59 	.word	0x08002a59
 8002994:	08002a59 	.word	0x08002a59
 8002998:	08002a59 	.word	0x08002a59
 800299c:	08002a59 	.word	0x08002a59
 80029a0:	08002a59 	.word	0x08002a59
 80029a4:	08002a59 	.word	0x08002a59
 80029a8:	08002a2d 	.word	0x08002a2d
 80029ac:	08002a59 	.word	0x08002a59
 80029b0:	08002a59 	.word	0x08002a59
 80029b4:	08002a59 	.word	0x08002a59
 80029b8:	08002a59 	.word	0x08002a59
 80029bc:	08002a59 	.word	0x08002a59
 80029c0:	08002a59 	.word	0x08002a59
 80029c4:	08002a59 	.word	0x08002a59
 80029c8:	08002a43 	.word	0x08002a43
 80029cc:	08002a59 	.word	0x08002a59
 80029d0:	08002a59 	.word	0x08002a59
 80029d4:	08002a59 	.word	0x08002a59
 80029d8:	08002a59 	.word	0x08002a59
 80029dc:	08002a59 	.word	0x08002a59
 80029e0:	08002a59 	.word	0x08002a59
 80029e4:	08002a59 	.word	0x08002a59
 80029e8:	08002a61 	.word	0x08002a61
 80029ec:	08002a59 	.word	0x08002a59
 80029f0:	08002a59 	.word	0x08002a59
 80029f4:	08002a59 	.word	0x08002a59
 80029f8:	08002a59 	.word	0x08002a59
 80029fc:	08002a59 	.word	0x08002a59
 8002a00:	08002a59 	.word	0x08002a59
 8002a04:	08002a59 	.word	0x08002a59
 8002a08:	08002a61 	.word	0x08002a61
 8002a0c:	08002a59 	.word	0x08002a59
 8002a10:	08002a59 	.word	0x08002a59
 8002a14:	08002a59 	.word	0x08002a59
 8002a18:	08002a59 	.word	0x08002a59
 8002a1c:	08002a59 	.word	0x08002a59
 8002a20:	08002a59 	.word	0x08002a59
 8002a24:	08002a59 	.word	0x08002a59
 8002a28:	08002a61 	.word	0x08002a61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a30:	3308      	adds	r3, #8
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 fe95 	bl	8004764 <RCCEx_PLL2_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002a40:	e00f      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a46:	3328      	adds	r3, #40	@ 0x28
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 ff3c 	bl	80048c8 <RCCEx_PLL3_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002a56:	e004      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a5e:	e000      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a6a:	4bbf      	ldr	r3, [pc, #764]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a78:	4abb      	ldr	r2, [pc, #748]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002a7e:	e003      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f002 0302 	and.w	r3, r2, #2
 8002a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	d041      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d824      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002b05 	.word	0x08002b05
 8002abc:	08002ad1 	.word	0x08002ad1
 8002ac0:	08002ae7 	.word	0x08002ae7
 8002ac4:	08002b05 	.word	0x08002b05
 8002ac8:	08002b05 	.word	0x08002b05
 8002acc:	08002b05 	.word	0x08002b05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 fe43 	bl	8004764 <RCCEx_PLL2_Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002ae4:	e00f      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aea:	3328      	adds	r3, #40	@ 0x28
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 feea 	bl	80048c8 <RCCEx_PLL3_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002afa:	e004      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b02:	e000      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10a      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b0e:	4b96      	ldr	r3, [pc, #600]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	f023 0107 	bic.w	r1, r3, #7
 8002b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b1c:	4a92      	ldr	r2, [pc, #584]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	6553      	str	r3, [r2, #84]	@ 0x54
 8002b22:	e003      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f002 0304 	and.w	r3, r2, #4
 8002b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	d044      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d825      	bhi.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002b58:	a201      	add	r2, pc, #4	@ (adr r2, 8002b60 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5e:	bf00      	nop
 8002b60:	08002bad 	.word	0x08002bad
 8002b64:	08002b79 	.word	0x08002b79
 8002b68:	08002b8f 	.word	0x08002b8f
 8002b6c:	08002bad 	.word	0x08002bad
 8002b70:	08002bad 	.word	0x08002bad
 8002b74:	08002bad 	.word	0x08002bad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 fdef 	bl	8004764 <RCCEx_PLL2_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002b8c:	e00f      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b92:	3328      	adds	r3, #40	@ 0x28
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 fe96 	bl	80048c8 <RCCEx_PLL3_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ba2:	e004      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10b      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bba:	f023 0107 	bic.w	r1, r3, #7
 8002bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bc6:	4a68      	ldr	r2, [pc, #416]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f002 0320 	and.w	r3, r2, #32
 8002be2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	d055      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c02:	d033      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c08:	d82c      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0e:	d02f      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c14:	d826      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c1a:	d02b      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002c1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c20:	d820      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c26:	d012      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c2c:	d81a      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d022      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c36:	d115      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fd8f 	bl	8004764 <RCCEx_PLL2_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002c4c:	e015      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c52:	3328      	adds	r3, #40	@ 0x28
 8002c54:	2102      	movs	r1, #2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 fe36 	bl	80048c8 <RCCEx_PLL3_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002c62:	e00a      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c6a:	e006      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c6c:	bf00      	nop
 8002c6e:	e004      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c70:	bf00      	nop
 8002c72:	e002      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c74:	bf00      	nop
 8002c76:	e000      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10b      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c82:	4b39      	ldr	r3, [pc, #228]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c92:	4a35      	ldr	r2, [pc, #212]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6553      	str	r3, [r2, #84]	@ 0x54
 8002c98:	e003      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002cb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	d058      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002cce:	d033      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002cd0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002cd4:	d82c      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cda:	d02f      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce0:	d826      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002ce2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ce6:	d02b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002ce8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002cec:	d820      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cf2:	d012      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cf8:	d81a      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d022      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d02:	d115      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d08:	3308      	adds	r3, #8
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fd29 	bl	8004764 <RCCEx_PLL2_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002d18:	e015      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d1e:	3328      	adds	r3, #40	@ 0x28
 8002d20:	2102      	movs	r1, #2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 fdd0 	bl	80048c8 <RCCEx_PLL3_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d36:	e006      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d38:	bf00      	nop
 8002d3a:	e004      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d3c:	bf00      	nop
 8002d3e:	e002      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d40:	bf00      	nop
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10e      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d4e:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d5e:	4a02      	ldr	r2, [pc, #8]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d64:	e006      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002d66:	bf00      	nop
 8002d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4313      	orrs	r3, r2
 8002d92:	d055      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002da0:	d033      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002da2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002da6:	d82c      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dac:	d02f      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002db2:	d826      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002db4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002db8:	d02b      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002dba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002dbe:	d820      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dc4:	d012      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dca:	d81a      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d022      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dd4:	d115      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dda:	3308      	adds	r3, #8
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 fcc0 	bl	8004764 <RCCEx_PLL2_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002dea:	e015      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df0:	3328      	adds	r3, #40	@ 0x28
 8002df2:	2102      	movs	r1, #2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fd67 	bl	80048c8 <RCCEx_PLL3_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002e00:	e00a      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e08:	e006      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e0a:	bf00      	nop
 8002e0c:	e004      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e20:	4ba1      	ldr	r3, [pc, #644]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e30:	4a9d      	ldr	r2, [pc, #628]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e36:	e003      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f002 0308 	and.w	r3, r2, #8
 8002e4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	d01e      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e72:	3328      	adds	r3, #40	@ 0x28
 8002e74:	2102      	movs	r1, #2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 fd26 	bl	80048c8 <RCCEx_PLL3_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002e88:	4b87      	ldr	r3, [pc, #540]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e98:	4a83      	ldr	r2, [pc, #524]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f002 0310 	and.w	r3, r2, #16
 8002eaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002eb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	d01e      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eca:	d10c      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed0:	3328      	adds	r3, #40	@ 0x28
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 fcf7 	bl	80048c8 <RCCEx_PLL3_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ee6:	4b70      	ldr	r3, [pc, #448]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ef6:	4a6c      	ldr	r2, [pc, #432]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002f08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002f16:	460b      	mov	r3, r1
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	d03e      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f28:	d022      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f2e:	d81b      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002f3a:	e015      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f40:	3308      	adds	r3, #8
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 fc0d 	bl	8004764 <RCCEx_PLL2_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002f50:	e00f      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f56:	3328      	adds	r3, #40	@ 0x28
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fcb4 	bl	80048c8 <RCCEx_PLL3_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002f66:	e004      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f6e:	e000      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f8a:	4a47      	ldr	r2, [pc, #284]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f90:	e003      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002fa6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fa8:	2300      	movs	r3, #0
 8002faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	d03b      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002fc2:	d01f      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002fc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002fc8:	d818      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8002fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fce:	d003      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8002fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8002fd6:	e011      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd8:	4b33      	ldr	r3, [pc, #204]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fdc:	4a32      	ldr	r2, [pc, #200]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002fe4:	e00f      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fea:	3328      	adds	r3, #40	@ 0x28
 8002fec:	2101      	movs	r1, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 fc6a 	bl	80048c8 <RCCEx_PLL3_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8002ffa:	e004      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003002:	e000      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800300e:	4b26      	ldr	r3, [pc, #152]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003020:	430b      	orrs	r3, r1
 8003022:	6553      	str	r3, [r2, #84]	@ 0x54
 8003024:	e003      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800302a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800302e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800303a:	673b      	str	r3, [r7, #112]	@ 0x70
 800303c:	2300      	movs	r3, #0
 800303e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003040:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003044:	460b      	mov	r3, r1
 8003046:	4313      	orrs	r3, r2
 8003048:	d034      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d007      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800305a:	e011      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305c:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	4a11      	ldr	r2, [pc, #68]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003068:	e00e      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306e:	3308      	adds	r3, #8
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f001 fb76 	bl	8004764 <RCCEx_PLL2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800307e:	e003      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003094:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309e:	4a02      	ldr	r2, [pc, #8]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80030a6:	bf00      	nop
 80030a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80030c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030c2:	2300      	movs	r3, #0
 80030c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80030ca:	460b      	mov	r3, r1
 80030cc:	4313      	orrs	r3, r2
 80030ce:	d00c      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80030d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d4:	3328      	adds	r3, #40	@ 0x28
 80030d6:	2102      	movs	r1, #2
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 fbf5 	bl	80048c8 <RCCEx_PLL3_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80030f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80030f8:	2300      	movs	r3, #0
 80030fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80030fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003100:	460b      	mov	r3, r1
 8003102:	4313      	orrs	r3, r2
 8003104:	d038      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800310e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003112:	d018      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003118:	d811      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800311a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800311e:	d014      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003124:	d80b      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d011      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800312a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312e:	d106      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4bc3      	ldr	r3, [pc, #780]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	4ac2      	ldr	r2, [pc, #776]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800313c:	e008      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003144:	e004      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800314e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003158:	4bb9      	ldr	r3, [pc, #740]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003168:	4ab5      	ldr	r2, [pc, #724]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800316a:	430b      	orrs	r3, r1
 800316c:	6553      	str	r3, [r2, #84]	@ 0x54
 800316e:	e003      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003184:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003186:	2300      	movs	r3, #0
 8003188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800318a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800318e:	460b      	mov	r3, r1
 8003190:	4313      	orrs	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003194:	4baa      	ldr	r3, [pc, #680]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003198:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800319c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a2:	4aa7      	ldr	r2, [pc, #668]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80031b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80031b6:	2300      	movs	r3, #0
 80031b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80031ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80031be:	460b      	mov	r3, r1
 80031c0:	4313      	orrs	r3, r2
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80031c4:	4b9e      	ldr	r3, [pc, #632]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80031d4:	4a9a      	ldr	r2, [pc, #616]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031d6:	430b      	orrs	r3, r1
 80031d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80031e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031e8:	2300      	movs	r3, #0
 80031ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80031f0:	460b      	mov	r3, r1
 80031f2:	4313      	orrs	r3, r2
 80031f4:	d009      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031f6:	4b92      	ldr	r3, [pc, #584]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80031fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003204:	4a8e      	ldr	r2, [pc, #568]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003206:	430b      	orrs	r3, r1
 8003208:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800320a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003216:	643b      	str	r3, [r7, #64]	@ 0x40
 8003218:	2300      	movs	r3, #0
 800321a:	647b      	str	r3, [r7, #68]	@ 0x44
 800321c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003220:	460b      	mov	r3, r1
 8003222:	4313      	orrs	r3, r2
 8003224:	d00e      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003226:	4b86      	ldr	r3, [pc, #536]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	4a85      	ldr	r2, [pc, #532]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800322c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003230:	6113      	str	r3, [r2, #16]
 8003232:	4b83      	ldr	r3, [pc, #524]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003234:	6919      	ldr	r1, [r3, #16]
 8003236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800323e:	4a80      	ldr	r2, [pc, #512]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003240:	430b      	orrs	r3, r1
 8003242:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003252:	2300      	movs	r3, #0
 8003254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003256:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800325a:	460b      	mov	r3, r1
 800325c:	4313      	orrs	r3, r2
 800325e:	d009      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003260:	4b77      	ldr	r3, [pc, #476]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003264:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	4a74      	ldr	r2, [pc, #464]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003270:	430b      	orrs	r3, r1
 8003272:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003280:	633b      	str	r3, [r7, #48]	@ 0x30
 8003282:	2300      	movs	r3, #0
 8003284:	637b      	str	r3, [r7, #52]	@ 0x34
 8003286:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800328a:	460b      	mov	r3, r1
 800328c:	4313      	orrs	r3, r2
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003290:	4b6b      	ldr	r3, [pc, #428]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032a0:	4a67      	ldr	r2, [pc, #412]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032a2:	430b      	orrs	r3, r1
 80032a4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	2100      	movs	r1, #0
 80032b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80032bc:	460b      	mov	r3, r1
 80032be:	4313      	orrs	r3, r2
 80032c0:	d011      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c6:	3308      	adds	r3, #8
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 fa4a 	bl	8004764 <RCCEx_PLL2_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80032d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80032e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	2100      	movs	r1, #0
 80032f0:	6239      	str	r1, [r7, #32]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80032fc:	460b      	mov	r3, r1
 80032fe:	4313      	orrs	r3, r2
 8003300:	d011      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003306:	3308      	adds	r3, #8
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f001 fa2a 	bl	8004764 <RCCEx_PLL2_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	2100      	movs	r1, #0
 8003330:	61b9      	str	r1, [r7, #24]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800333c:	460b      	mov	r3, r1
 800333e:	4313      	orrs	r3, r2
 8003340:	d011      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003346:	3308      	adds	r3, #8
 8003348:	2102      	movs	r1, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f001 fa0a 	bl	8004764 <RCCEx_PLL2_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	2100      	movs	r1, #0
 8003370:	6139      	str	r1, [r7, #16]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800337c:	460b      	mov	r3, r1
 800337e:	4313      	orrs	r3, r2
 8003380:	d011      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003386:	3328      	adds	r3, #40	@ 0x28
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f001 fa9c 	bl	80048c8 <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	2100      	movs	r1, #0
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80033bc:	460b      	mov	r3, r1
 80033be:	4313      	orrs	r3, r2
 80033c0:	d011      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	3328      	adds	r3, #40	@ 0x28
 80033c8:	2101      	movs	r1, #1
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fa7c 	bl	80048c8 <RCCEx_PLL3_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80033d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	2100      	movs	r1, #0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80033fc:	460b      	mov	r3, r1
 80033fe:	4313      	orrs	r3, r2
 8003400:	d011      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003406:	3328      	adds	r3, #40	@ 0x28
 8003408:	2102      	movs	r1, #2
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fa5c 	bl	80048c8 <RCCEx_PLL3_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003426:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e000      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
}
 8003434:	4618      	mov	r0, r3
 8003436:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800343a:	46bd      	mov	sp, r7
 800343c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003440:	58024400 	.word	0x58024400

08003444 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b090      	sub	sp, #64	@ 0x40
 8003448:	af00      	add	r7, sp, #0
 800344a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800344e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003452:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8003456:	430b      	orrs	r3, r1
 8003458:	f040 8094 	bne.w	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800345c:	4b9e      	ldr	r3, [pc, #632]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800345e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	2b04      	cmp	r3, #4
 800346a:	f200 8087 	bhi.w	800357c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800346e:	a201      	add	r2, pc, #4	@ (adr r2, 8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	08003489 	.word	0x08003489
 8003478:	080034b1 	.word	0x080034b1
 800347c:	080034d9 	.word	0x080034d9
 8003480:	08003575 	.word	0x08003575
 8003484:	08003501 	.word	0x08003501
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003488:	4b93      	ldr	r3, [pc, #588]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003490:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003494:	d108      	bne.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800349a:	4618      	mov	r0, r3
 800349c:	f001 f810 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80034a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80034a4:	f000 bd45 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034ac:	f000 bd41 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80034b0:	4b89      	ldr	r3, [pc, #548]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034bc:	d108      	bne.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80034be:	f107 0318 	add.w	r3, r7, #24
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fd54 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80034cc:	f000 bd31 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034d4:	f000 bd2d 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80034d8:	4b7f      	ldr	r3, [pc, #508]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034e4:	d108      	bne.n	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fe94 	bl	8004218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80034f4:	f000 bd1d 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034fc:	f000 bd19 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003500:	4b75      	ldr	r3, [pc, #468]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003504:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003508:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800350a:	4b73      	ldr	r3, [pc, #460]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b04      	cmp	r3, #4
 8003514:	d10c      	bne.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800351c:	4b6e      	ldr	r3, [pc, #440]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	4a6d      	ldr	r2, [pc, #436]	@ (80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
 800352c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800352e:	e01f      	b.n	8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003530:	4b69      	ldr	r3, [pc, #420]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353c:	d106      	bne.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800353e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003544:	d102      	bne.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003546:	4b66      	ldr	r3, [pc, #408]	@ (80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800354a:	e011      	b.n	8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800354c:	4b62      	ldr	r3, [pc, #392]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003558:	d106      	bne.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800355a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003560:	d102      	bne.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003562:	4b60      	ldr	r3, [pc, #384]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003566:	e003      	b.n	8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800356c:	f000 bce1 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003570:	f000 bcdf 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003574:	4b5c      	ldr	r3, [pc, #368]	@ (80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003578:	f000 bcdb 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003580:	f000 bcd7 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003588:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800358c:	430b      	orrs	r3, r1
 800358e:	f040 80ad 	bne.w	80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8003592:	4b51      	ldr	r3, [pc, #324]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003596:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800359a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a2:	d056      	beq.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035aa:	f200 8090 	bhi.w	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80035b2:	f000 8088 	beq.w	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80035ba:	f200 8088 	bhi.w	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80035be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c0:	2b80      	cmp	r3, #128	@ 0x80
 80035c2:	d032      	beq.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	2b80      	cmp	r3, #128	@ 0x80
 80035c8:	f200 8081 	bhi.w	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80035cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	2b40      	cmp	r3, #64	@ 0x40
 80035d6:	d014      	beq.n	8003602 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80035d8:	e079      	b.n	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80035da:	4b3f      	ldr	r3, [pc, #252]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035e6:	d108      	bne.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80035e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 ff67 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80035f6:	f000 bc9c 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035fe:	f000 bc98 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003602:	4b35      	ldr	r3, [pc, #212]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800360a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360e:	d108      	bne.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003610:	f107 0318 	add.w	r3, r7, #24
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fcab 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800361e:	f000 bc88 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003626:	f000 bc84 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800362a:	4b2b      	ldr	r3, [pc, #172]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003636:	d108      	bne.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003638:	f107 030c 	add.w	r3, r7, #12
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fdeb 	bl	8004218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003646:	f000 bc74 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800364e:	f000 bc70 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003652:	4b21      	ldr	r3, [pc, #132]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800365a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800365c:	4b1e      	ldr	r3, [pc, #120]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d10c      	bne.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8003668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800366e:	4b1a      	ldr	r3, [pc, #104]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	08db      	lsrs	r3, r3, #3
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	4a18      	ldr	r2, [pc, #96]	@ (80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800367a:	fa22 f303 	lsr.w	r3, r2, r3
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003680:	e01f      	b.n	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003682:	4b15      	ldr	r3, [pc, #84]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800368e:	d106      	bne.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003692:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003696:	d102      	bne.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003698:	4b11      	ldr	r3, [pc, #68]	@ (80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800369a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800369c:	e011      	b.n	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800369e:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036aa:	d106      	bne.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80036ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036b2:	d102      	bne.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80036b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b8:	e003      	b.n	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80036be:	f000 bc38 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80036c2:	f000 bc36 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80036c6:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80036c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036ca:	f000 bc32 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036d2:	f000 bc2e 	b.w	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80036d6:	bf00      	nop
 80036d8:	58024400 	.word	0x58024400
 80036dc:	03d09000 	.word	0x03d09000
 80036e0:	003d0900 	.word	0x003d0900
 80036e4:	017d7840 	.word	0x017d7840
 80036e8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80036ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036f0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80036f4:	430b      	orrs	r3, r1
 80036f6:	f040 809c 	bne.w	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80036fa:	4b9e      	ldr	r3, [pc, #632]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fe:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8003702:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800370a:	d054      	beq.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003712:	f200 808b 	bhi.w	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800371c:	f000 8083 	beq.w	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003722:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003726:	f200 8081 	bhi.w	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003730:	d02f      	beq.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8003732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003738:	d878      	bhi.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003746:	d012      	beq.n	800376e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8003748:	e070      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800374a:	4b8a      	ldr	r3, [pc, #552]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003756:	d107      	bne.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800375c:	4618      	mov	r0, r3
 800375e:	f000 feaf 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003766:	e3e4      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800376c:	e3e1      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800376e:	4b81      	ldr	r3, [pc, #516]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800377a:	d107      	bne.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800377c:	f107 0318 	add.w	r3, r7, #24
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fbf5 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800378a:	e3d2      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003790:	e3cf      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003792:	4b78      	ldr	r3, [pc, #480]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800379a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800379e:	d107      	bne.n	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fd37 	bl	8004218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80037ae:	e3c0      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037b4:	e3bd      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80037b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80037c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d10c      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80037cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037d2:	4b68      	ldr	r3, [pc, #416]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	4a66      	ldr	r2, [pc, #408]	@ (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037e4:	e01e      	b.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80037e6:	4b63      	ldr	r3, [pc, #396]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037f2:	d106      	bne.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80037f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037fa:	d102      	bne.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80037fc:	4b5f      	ldr	r3, [pc, #380]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003800:	e010      	b.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003802:	4b5c      	ldr	r3, [pc, #368]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800380e:	d106      	bne.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8003810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003816:	d102      	bne.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003818:	4b59      	ldr	r3, [pc, #356]	@ (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800381a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8003822:	e386      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003824:	e385      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003826:	4b57      	ldr	r3, [pc, #348]	@ (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8003828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800382a:	e382      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003830:	e37f      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003836:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800383a:	430b      	orrs	r3, r1
 800383c:	f040 80a7 	bne.w	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8003840:	4b4c      	ldr	r3, [pc, #304]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8003848:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003850:	d055      	beq.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8003852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003858:	f200 8096 	bhi.w	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003862:	f000 8084 	beq.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800386c:	f200 808c 	bhi.w	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8003870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003876:	d030      	beq.n	80038da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800387e:	f200 8083 	bhi.w	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800388e:	d012      	beq.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003890:	e07a      	b.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003892:	4b38      	ldr	r3, [pc, #224]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800389e:	d107      	bne.n	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80038a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fe0b 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80038ae:	e340      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038b4:	e33d      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80038b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038c2:	d107      	bne.n	80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038c4:	f107 0318 	add.w	r3, r7, #24
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fb51 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80038d2:	e32e      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038d8:	e32b      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80038da:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e6:	d107      	bne.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fc93 	bl	8004218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80038f6:	e31c      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038fc:	e319      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80038fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003908:	4b1a      	ldr	r3, [pc, #104]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d10c      	bne.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8003914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800391a:	4b16      	ldr	r3, [pc, #88]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	4a14      	ldr	r2, [pc, #80]	@ (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800392c:	e01e      	b.n	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800392e:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393a:	d106      	bne.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800393c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003942:	d102      	bne.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003944:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003948:	e010      	b.n	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800394a:	4b0a      	ldr	r3, [pc, #40]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003956:	d106      	bne.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8003958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800395e:	d102      	bne.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003960:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8003962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003964:	e002      	b.n	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800396a:	e2e2      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800396c:	e2e1      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800396e:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8003970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003972:	e2de      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003974:	58024400 	.word	0x58024400
 8003978:	03d09000 	.word	0x03d09000
 800397c:	003d0900 	.word	0x003d0900
 8003980:	017d7840 	.word	0x017d7840
 8003984:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800398c:	e2d1      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800398e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003992:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8003996:	430b      	orrs	r3, r1
 8003998:	f040 809c 	bne.w	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800399c:	4b93      	ldr	r3, [pc, #588]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800399e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80039a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80039a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ac:	d054      	beq.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80039ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039b4:	f200 808b 	bhi.w	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80039b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039be:	f000 8083 	beq.w	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80039c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039c8:	f200 8081 	bhi.w	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d2:	d02f      	beq.n	8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80039d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039da:	d878      	bhi.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80039dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80039e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e8:	d012      	beq.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80039ea:	e070      	b.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80039ec:	4b7f      	ldr	r3, [pc, #508]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039f8:	d107      	bne.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd5e 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003a08:	e293      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a0e:	e290      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003a10:	4b76      	ldr	r3, [pc, #472]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a1e:	f107 0318 	add.w	r3, r7, #24
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 faa4 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003a2c:	e281      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a32:	e27e      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a34:	4b6d      	ldr	r3, [pc, #436]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a40:	d107      	bne.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fbe6 	bl	8004218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003a50:	e26f      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a56:	e26c      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003a58:	4b64      	ldr	r3, [pc, #400]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a60:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003a62:	4b62      	ldr	r3, [pc, #392]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a74:	4b5d      	ldr	r3, [pc, #372]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	08db      	lsrs	r3, r3, #3
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
 8003a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a86:	e01e      	b.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003a88:	4b58      	ldr	r3, [pc, #352]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a9c:	d102      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003a9e:	4b55      	ldr	r3, [pc, #340]	@ (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa2:	e010      	b.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003aa4:	4b51      	ldr	r3, [pc, #324]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab8:	d102      	bne.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003aba:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8003abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003abe:	e002      	b.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8003ac4:	e235      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003ac6:	e234      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8003aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003acc:	e231      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ad2:	e22e      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8003ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ad8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8003adc:	430b      	orrs	r3, r1
 8003ade:	f040 808f 	bne.w	8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8003ae2:	4b42      	ldr	r3, [pc, #264]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8003aea:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8003aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af2:	d06b      	beq.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8003af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003afa:	d874      	bhi.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8003afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b02:	d056      	beq.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b0a:	d86c      	bhi.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b12:	d03b      	beq.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8003b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b1a:	d864      	bhi.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b22:	d021      	beq.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b2a:	d85c      	bhi.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b38:	d004      	beq.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8003b3a:	e054      	b.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f7fe fa62 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8003b40:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003b42:	e1f6      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b44:	4b29      	ldr	r3, [pc, #164]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b50:	d107      	bne.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b52:	f107 0318 	add.w	r3, r7, #24
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fa0a 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b60:	e1e7      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b66:	e1e4      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003b68:	4b20      	ldr	r3, [pc, #128]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b74:	d107      	bne.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b76:	f107 030c 	add.w	r3, r7, #12
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fb4c 	bl	8004218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b84:	e1d5      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b8a:	e1d2      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d109      	bne.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b98:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	4a13      	ldr	r2, [pc, #76]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003baa:	e1c2      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bb0:	e1bf      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bbe:	d102      	bne.n	8003bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8003bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003bc4:	e1b5      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bca:	e1b2      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bcc:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bd8:	d102      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8003bda:	4b07      	ldr	r3, [pc, #28]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8003bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003bde:	e1a8      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003be4:	e1a5      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bea:	e1a2      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	03d09000 	.word	0x03d09000
 8003bf4:	003d0900 	.word	0x003d0900
 8003bf8:	017d7840 	.word	0x017d7840
 8003bfc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c04:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	d173      	bne.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003c0c:	4b9c      	ldr	r3, [pc, #624]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c1c:	d02f      	beq.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c24:	d863      	bhi.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8003c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c32:	d012      	beq.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8003c34:	e05b      	b.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003c36:	4b92      	ldr	r3, [pc, #584]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c42:	d107      	bne.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c44:	f107 0318 	add.w	r3, r7, #24
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f991 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003c52:	e16e      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c58:	e16b      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003c5a:	4b89      	ldr	r3, [pc, #548]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c66:	d107      	bne.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c68:	f107 030c 	add.w	r3, r7, #12
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fad3 	bl	8004218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003c76:	e15c      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c7c:	e159      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003c7e:	4b80      	ldr	r3, [pc, #512]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003c88:	4b7d      	ldr	r3, [pc, #500]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d10c      	bne.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8003c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c9a:	4b79      	ldr	r3, [pc, #484]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	08db      	lsrs	r3, r3, #3
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	4a77      	ldr	r2, [pc, #476]	@ (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cac:	e01e      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003cae:	4b74      	ldr	r3, [pc, #464]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cba:	d106      	bne.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cc2:	d102      	bne.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003cc4:	4b70      	ldr	r3, [pc, #448]	@ (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8003cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc8:	e010      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003cca:	4b6d      	ldr	r3, [pc, #436]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cd6:	d106      	bne.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cde:	d102      	bne.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003ce0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8003ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ce4:	e002      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8003cea:	e122      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003cec:	e121      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003cf2:	e11e      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cf8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	d133      	bne.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003d00:	4b5f      	ldr	r3, [pc, #380]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d16:	d012      	beq.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8003d18:	e023      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d1a:	4b59      	ldr	r3, [pc, #356]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d26:	d107      	bne.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fbc7 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d36:	e0fc      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003d3c:	e0f9      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003d3e:	4b50      	ldr	r3, [pc, #320]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d4c:	f107 0318 	add.w	r3, r7, #24
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f90d 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d5a:	e0ea      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003d60:	e0e7      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003d66:	e0e4      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8003d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8003d70:	430b      	orrs	r3, r1
 8003d72:	f040 808d 	bne.w	8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8003d76:	4b42      	ldr	r3, [pc, #264]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8003d7e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8003d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d86:	d06b      	beq.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d8e:	d874      	bhi.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d96:	d056      	beq.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8003d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d9e:	d86c      	bhi.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003da6:	d03b      	beq.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8003da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003daa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dae:	d864      	bhi.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003db6:	d021      	beq.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dbe:	d85c      	bhi.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dcc:	d004      	beq.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8003dce:	e054      	b.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8003dd0:	f000 f8b8 	bl	8003f44 <HAL_RCCEx_GetD3PCLK1Freq>
 8003dd4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003dd6:	e0ac      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003dd8:	4b29      	ldr	r3, [pc, #164]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de4:	d107      	bne.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003de6:	f107 0318 	add.w	r3, r7, #24
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f8c0 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003df4:	e09d      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003dfa:	e09a      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003dfc:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e08:	d107      	bne.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e0a:	f107 030c 	add.w	r3, r7, #12
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fa02 	bl	8004218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e18:	e08b      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003e1e:	e088      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e20:	4b17      	ldr	r3, [pc, #92]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d109      	bne.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e2c:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	08db      	lsrs	r3, r3, #3
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	4a13      	ldr	r2, [pc, #76]	@ (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e3e:	e078      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003e44:	e075      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003e46:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e52:	d102      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8003e54:	4b0c      	ldr	r3, [pc, #48]	@ (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8003e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e58:	e06b      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003e5e:	e068      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e60:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e6c:	d102      	bne.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8003e6e:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8003e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e72:	e05e      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003e78:	e05b      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003e7e:	e058      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003e80:	58024400 	.word	0x58024400
 8003e84:	03d09000 	.word	0x03d09000
 8003e88:	003d0900 	.word	0x003d0900
 8003e8c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8003e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e94:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	d148      	bne.n	8003f2e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003e9c:	4b27      	ldr	r3, [pc, #156]	@ (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8003e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ea4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eac:	d02a      	beq.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eb4:	d838      	bhi.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d004      	beq.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8003ec4:	e030      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ed2:	d102      	bne.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8003ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003ed8:	e02b      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ede:	e028      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003ee0:	4b16      	ldr	r3, [pc, #88]	@ (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eec:	d107      	bne.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fae4 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003efc:	e019      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f02:	e016      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003f04:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f10:	d107      	bne.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f12:	f107 0318 	add.w	r3, r7, #24
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f82a 	bl	8003f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003f20:	e007      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f26:	e004      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f2c:	e001      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8003f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3740      	adds	r7, #64	@ 0x40
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	017d7840 	.word	0x017d7840

08003f44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f48:	f7fe f82c 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4904      	ldr	r1, [pc, #16]	@ (8003f6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	08006b10 	.word	0x08006b10

08003f70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	@ 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f78:	4ba1      	ldr	r3, [pc, #644]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003f82:	4b9f      	ldr	r3, [pc, #636]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f86:	0b1b      	lsrs	r3, r3, #12
 8003f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f8e:	4b9c      	ldr	r3, [pc, #624]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f9a:	4b99      	ldr	r3, [pc, #612]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9e:	08db      	lsrs	r3, r3, #3
 8003fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8111 	beq.w	80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	f000 8083 	beq.w	80040cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	f200 80a1 	bhi.w	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d056      	beq.n	8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003fda:	e099      	b.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fdc:	4b88      	ldr	r3, [pc, #544]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d02d      	beq.n	8004044 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fe8:	4b85      	ldr	r3, [pc, #532]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	08db      	lsrs	r3, r3, #3
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	4a84      	ldr	r2, [pc, #528]	@ (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004012:	4b7b      	ldr	r3, [pc, #492]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004022:	ed97 6a03 	vldr	s12, [r7, #12]
 8004026:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800402a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004042:	e087      	b.n	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800420c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004056:	4b6a      	ldr	r3, [pc, #424]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004066:	ed97 6a03 	vldr	s12, [r7, #12]
 800406a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004086:	e065      	b.n	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	4b59      	ldr	r3, [pc, #356]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ca:	e043      	b.n	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040de:	4b48      	ldr	r3, [pc, #288]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80040f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800410e:	e021      	b.n	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004122:	4b37      	ldr	r3, [pc, #220]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004132:	ed97 6a03 	vldr	s12, [r7, #12]
 8004136:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004152:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004154:	4b2a      	ldr	r3, [pc, #168]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	0a5b      	lsrs	r3, r3, #9
 800415a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800416a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800416e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417a:	ee17 2a90 	vmov	r2, s15
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004182:	4b1f      	ldr	r3, [pc, #124]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004194:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800419c:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a8:	ee17 2a90 	vmov	r2, s15
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80041b0:	4b13      	ldr	r3, [pc, #76]	@ (8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	0e1b      	lsrs	r3, r3, #24
 80041b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d6:	ee17 2a90 	vmov	r2, s15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041de:	e008      	b.n	80041f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
}
 80041f2:	bf00      	nop
 80041f4:	3724      	adds	r7, #36	@ 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400
 8004204:	03d09000 	.word	0x03d09000
 8004208:	46000000 	.word	0x46000000
 800420c:	4c742400 	.word	0x4c742400
 8004210:	4a742400 	.word	0x4a742400
 8004214:	4bbebc20 	.word	0x4bbebc20

08004218 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	@ 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004220:	4ba1      	ldr	r3, [pc, #644]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800422a:	4b9f      	ldr	r3, [pc, #636]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	0d1b      	lsrs	r3, r3, #20
 8004230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004234:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004236:	4b9c      	ldr	r3, [pc, #624]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004242:	4b99      	ldr	r3, [pc, #612]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	08db      	lsrs	r3, r3, #3
 8004248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8111 	beq.w	8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b02      	cmp	r3, #2
 800426a:	f000 8083 	beq.w	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b02      	cmp	r3, #2
 8004272:	f200 80a1 	bhi.w	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d056      	beq.n	8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004282:	e099      	b.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004284:	4b88      	ldr	r3, [pc, #544]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02d      	beq.n	80042ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004290:	4b85      	ldr	r3, [pc, #532]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	08db      	lsrs	r3, r3, #3
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	4a84      	ldr	r2, [pc, #528]	@ (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
 80042a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ba:	4b7b      	ldr	r3, [pc, #492]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80042ea:	e087      	b.n	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80044b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fe:	4b6a      	ldr	r3, [pc, #424]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004312:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800432e:	e065      	b.n	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004342:	4b59      	ldr	r3, [pc, #356]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004352:	ed97 6a03 	vldr	s12, [r7, #12]
 8004356:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800435a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004372:	e043      	b.n	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004386:	4b48      	ldr	r3, [pc, #288]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a03 	vldr	s12, [r7, #12]
 800439a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043b6:	e021      	b.n	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b37      	ldr	r3, [pc, #220]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a03 	vldr	s12, [r7, #12]
 80043de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80043fc:	4b2a      	ldr	r3, [pc, #168]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	0a5b      	lsrs	r3, r3, #9
 8004402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004416:	edd7 6a07 	vldr	s13, [r7, #28]
 800441a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004422:	ee17 2a90 	vmov	r2, s15
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800442a:	4b1f      	ldr	r3, [pc, #124]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	0c1b      	lsrs	r3, r3, #16
 8004430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004440:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004444:	edd7 6a07 	vldr	s13, [r7, #28]
 8004448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800444c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004450:	ee17 2a90 	vmov	r2, s15
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004458:	4b13      	ldr	r3, [pc, #76]	@ (80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445c:	0e1b      	lsrs	r3, r3, #24
 800445e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800446e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004472:	edd7 6a07 	vldr	s13, [r7, #28]
 8004476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447e:	ee17 2a90 	vmov	r2, s15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004486:	e008      	b.n	800449a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	609a      	str	r2, [r3, #8]
}
 800449a:	bf00      	nop
 800449c:	3724      	adds	r7, #36	@ 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400
 80044ac:	03d09000 	.word	0x03d09000
 80044b0:	46000000 	.word	0x46000000
 80044b4:	4c742400 	.word	0x4c742400
 80044b8:	4a742400 	.word	0x4a742400
 80044bc:	4bbebc20 	.word	0x4bbebc20

080044c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b089      	sub	sp, #36	@ 0x24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044c8:	4ba0      	ldr	r3, [pc, #640]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80044d2:	4b9e      	ldr	r3, [pc, #632]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80044de:	4b9b      	ldr	r3, [pc, #620]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044e8:	4b98      	ldr	r3, [pc, #608]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ec:	08db      	lsrs	r3, r3, #3
 80044ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	ee07 3a90 	vmov	s15, r3
 80044fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004500:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8111 	beq.w	800472e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b02      	cmp	r3, #2
 8004510:	f000 8083 	beq.w	800461a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b02      	cmp	r3, #2
 8004518:	f200 80a1 	bhi.w	800465e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d056      	beq.n	80045d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004528:	e099      	b.n	800465e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800452a:	4b88      	ldr	r3, [pc, #544]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02d      	beq.n	8004592 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004536:	4b85      	ldr	r3, [pc, #532]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	08db      	lsrs	r3, r3, #3
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	4a83      	ldr	r2, [pc, #524]	@ (8004750 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	ee07 3a90 	vmov	s15, r3
 8004558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004560:	4b7a      	ldr	r3, [pc, #488]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004570:	ed97 6a03 	vldr	s12, [r7, #12]
 8004574:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004580:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004590:	e087      	b.n	80046a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8004758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80045a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a4:	4b69      	ldr	r3, [pc, #420]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80045bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045d4:	e065      	b.n	80046a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800475c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80045e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e8:	4b58      	ldr	r3, [pc, #352]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800460c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004618:	e043      	b.n	80046a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	ee07 3a90 	vmov	s15, r3
 8004620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004624:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8004760 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462c:	4b47      	ldr	r3, [pc, #284]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004640:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800465c:	e021      	b.n	80046a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004668:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8004758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800466c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004670:	4b36      	ldr	r3, [pc, #216]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004678:	ee07 3a90 	vmov	s15, r3
 800467c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004680:	ed97 6a03 	vldr	s12, [r7, #12]
 8004684:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80046a2:	4b2a      	ldr	r3, [pc, #168]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	0a5b      	lsrs	r3, r3, #9
 80046a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c8:	ee17 2a90 	vmov	r2, s15
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80046d0:	4b1e      	ldr	r3, [pc, #120]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f6:	ee17 2a90 	vmov	r2, s15
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80046fe:	4b13      	ldr	r3, [pc, #76]	@ (800474c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	0e1b      	lsrs	r3, r3, #24
 8004704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004708:	ee07 3a90 	vmov	s15, r3
 800470c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004718:	edd7 6a07 	vldr	s13, [r7, #28]
 800471c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004724:	ee17 2a90 	vmov	r2, s15
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800472c:	e008      	b.n	8004740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	3724      	adds	r7, #36	@ 0x24
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	58024400 	.word	0x58024400
 8004750:	03d09000 	.word	0x03d09000
 8004754:	46000000 	.word	0x46000000
 8004758:	4c742400 	.word	0x4c742400
 800475c:	4a742400 	.word	0x4a742400
 8004760:	4bbebc20 	.word	0x4bbebc20

08004764 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004772:	4b53      	ldr	r3, [pc, #332]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b03      	cmp	r3, #3
 800477c:	d101      	bne.n	8004782 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e099      	b.n	80048b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004782:	4b4f      	ldr	r3, [pc, #316]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a4e      	ldr	r2, [pc, #312]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004788:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800478c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478e:	f7fc f8d1 	bl	8000934 <HAL_GetTick>
 8004792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004794:	e008      	b.n	80047a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004796:	f7fc f8cd 	bl	8000934 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e086      	b.n	80048b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047a8:	4b45      	ldr	r3, [pc, #276]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047b4:	4b42      	ldr	r3, [pc, #264]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 80047b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	031b      	lsls	r3, r3, #12
 80047c2:	493f      	ldr	r1, [pc, #252]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	025b      	lsls	r3, r3, #9
 80047da:	b29b      	uxth	r3, r3
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	041b      	lsls	r3, r3, #16
 80047e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	061b      	lsls	r3, r3, #24
 80047f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80047f8:	4931      	ldr	r1, [pc, #196]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047fe:	4b30      	ldr	r3, [pc, #192]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	492d      	ldr	r1, [pc, #180]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 800480c:	4313      	orrs	r3, r2
 800480e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004810:	4b2b      	ldr	r3, [pc, #172]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	f023 0220 	bic.w	r2, r3, #32
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	4928      	ldr	r1, [pc, #160]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004822:	4b27      	ldr	r3, [pc, #156]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	4a26      	ldr	r2, [pc, #152]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004828:	f023 0310 	bic.w	r3, r3, #16
 800482c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800482e:	4b24      	ldr	r3, [pc, #144]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004830:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004832:	4b24      	ldr	r3, [pc, #144]	@ (80048c4 <RCCEx_PLL2_Config+0x160>)
 8004834:	4013      	ands	r3, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	69d2      	ldr	r2, [r2, #28]
 800483a:	00d2      	lsls	r2, r2, #3
 800483c:	4920      	ldr	r1, [pc, #128]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 800483e:	4313      	orrs	r3, r2
 8004840:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004842:	4b1f      	ldr	r3, [pc, #124]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	4a1e      	ldr	r2, [pc, #120]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004848:	f043 0310 	orr.w	r3, r3, #16
 800484c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004854:	4b1a      	ldr	r3, [pc, #104]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	4a19      	ldr	r2, [pc, #100]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 800485a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800485e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004860:	e00f      	b.n	8004882 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d106      	bne.n	8004876 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004868:	4b15      	ldr	r3, [pc, #84]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	4a14      	ldr	r2, [pc, #80]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 800486e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004872:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004874:	e005      	b.n	8004882 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004876:	4b12      	ldr	r3, [pc, #72]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	4a11      	ldr	r2, [pc, #68]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 800487c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004880:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004882:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a0e      	ldr	r2, [pc, #56]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 8004888:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800488c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488e:	f7fc f851 	bl	8000934 <HAL_GetTick>
 8004892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004894:	e008      	b.n	80048a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004896:	f7fc f84d 	bl	8000934 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e006      	b.n	80048b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048a8:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <RCCEx_PLL2_Config+0x15c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	58024400 	.word	0x58024400
 80048c4:	ffff0007 	.word	0xffff0007

080048c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048d6:	4b53      	ldr	r3, [pc, #332]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d101      	bne.n	80048e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e099      	b.n	8004a1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80048ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f2:	f7fc f81f 	bl	8000934 <HAL_GetTick>
 80048f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048f8:	e008      	b.n	800490c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048fa:	f7fc f81b 	bl	8000934 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e086      	b.n	8004a1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800490c:	4b45      	ldr	r3, [pc, #276]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004918:	4b42      	ldr	r3, [pc, #264]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 800491a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	051b      	lsls	r3, r3, #20
 8004926:	493f      	ldr	r1, [pc, #252]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 8004928:	4313      	orrs	r3, r2
 800492a:	628b      	str	r3, [r1, #40]	@ 0x28
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	3b01      	subs	r3, #1
 8004932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	3b01      	subs	r3, #1
 800493c:	025b      	lsls	r3, r3, #9
 800493e:	b29b      	uxth	r3, r3
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	3b01      	subs	r3, #1
 8004948:	041b      	lsls	r3, r3, #16
 800494a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	3b01      	subs	r3, #1
 8004956:	061b      	lsls	r3, r3, #24
 8004958:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800495c:	4931      	ldr	r1, [pc, #196]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004962:	4b30      	ldr	r3, [pc, #192]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	492d      	ldr	r1, [pc, #180]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 8004970:	4313      	orrs	r3, r2
 8004972:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004974:	4b2b      	ldr	r3, [pc, #172]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 8004976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004978:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	4928      	ldr	r1, [pc, #160]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004986:	4b27      	ldr	r3, [pc, #156]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	4a26      	ldr	r2, [pc, #152]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 800498c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004990:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004992:	4b24      	ldr	r3, [pc, #144]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 8004994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004996:	4b24      	ldr	r3, [pc, #144]	@ (8004a28 <RCCEx_PLL3_Config+0x160>)
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	69d2      	ldr	r2, [r2, #28]
 800499e:	00d2      	lsls	r2, r2, #3
 80049a0:	4920      	ldr	r1, [pc, #128]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	4a19      	ldr	r2, [pc, #100]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049c4:	e00f      	b.n	80049e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d106      	bne.n	80049da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049cc:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	4a14      	ldr	r2, [pc, #80]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049d8:	e005      	b.n	80049e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049da:	4b12      	ldr	r3, [pc, #72]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	4a11      	ldr	r2, [pc, #68]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f2:	f7fb ff9f 	bl	8000934 <HAL_GetTick>
 80049f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049f8:	e008      	b.n	8004a0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80049fa:	f7fb ff9b 	bl	8000934 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e006      	b.n	8004a1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <RCCEx_PLL3_Config+0x15c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	58024400 	.word	0x58024400
 8004a28:	ffff0007 	.word	0xffff0007

08004a2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	@ 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e075      	b.n	8004b2a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d105      	bne.n	8004a56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fb fd67 	bl	8000524 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f868 	bl	8004b34 <HAL_SD_InitCard>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e05d      	b.n	8004b2a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fc73 	bl	8005360 <HAL_SD_GetCardStatus>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e052      	b.n	8004b2a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004a84:	7e3b      	ldrb	r3, [r7, #24]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004a8a:	7e7b      	ldrb	r3, [r7, #25]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d10a      	bne.n	8004aae <HAL_SD_Init+0x82>
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <HAL_SD_Init+0x78>
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aaa:	659a      	str	r2, [r3, #88]	@ 0x58
 8004aac:	e00b      	b.n	8004ac6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d104      	bne.n	8004ac0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004abc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004abe:	e002      	b.n	8004ac6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fd05 	bl	80054dc <HAL_SD_ConfigWideBusOperation>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e026      	b.n	8004b2a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004adc:	f7fb ff2a 	bl	8000934 <HAL_GetTick>
 8004ae0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004ae2:	e011      	b.n	8004b08 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ae4:	f7fb ff26 	bl	8000934 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d109      	bne.n	8004b08 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004afa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e010      	b.n	8004b2a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fdf9 	bl	8005700 <HAL_SD_GetCardState>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d1e7      	bne.n	8004ae4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3728      	adds	r7, #40	@ 0x28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b08d      	sub	sp, #52	@ 0x34
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004b4c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	f7fe fc76 	bl	8003444 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b58:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004b6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e070      	b.n	8004c56 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	4a39      	ldr	r2, [pc, #228]	@ (8004c60 <HAL_SD_InitCard+0x12c>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681c      	ldr	r4, [r3, #0]
 8004b86:	466a      	mov	r2, sp
 8004b88:	f107 0318 	add.w	r3, r7, #24
 8004b8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b90:	e882 0003 	stmia.w	r2, {r0, r1}
 8004b94:	f107 030c 	add.w	r3, r7, #12
 8004b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f001 fa42 	bl	8006024 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fa85 	bl	80060b4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004bc2:	4a28      	ldr	r2, [pc, #160]	@ (8004c64 <HAL_SD_InitCard+0x130>)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	3301      	adds	r3, #1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fb febd 	bl	800094c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fe82 	bl	80058dc <SD_PowerON>
 8004bd8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e02e      	b.n	8004c56 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fda1 	bl	8005740 <SD_InitCard>
 8004bfe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e01b      	b.n	8004c56 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fada 	bl	80061e0 <SDMMC_CmdBlockLength>
 8004c2c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00f      	beq.n	8004c54 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a0b      	ldr	r2, [pc, #44]	@ (8004c68 <HAL_SD_InitCard+0x134>)
 8004c3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	372c      	adds	r7, #44	@ 0x2c
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd90      	pop	{r4, r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	014f8b59 	.word	0x014f8b59
 8004c64:	00012110 	.word	0x00012110
 8004c68:	1fe00fff 	.word	0x1fe00fff

08004c6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_SD_IRQHandler+0x2e>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f001 f90e 	bl	8005eb4 <SD_Read_IT>
 8004c98:	e19a      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80ac 	beq.w	8004e02 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cb2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b59      	ldr	r3, [pc, #356]	@ (8004e24 <HAL_SD_IRQHandler+0x1b8>)
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ce2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d038      	beq.n	8004d60 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <HAL_SD_IRQHandler+0x96>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d011      	beq.n	8004d26 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 fa8e 	bl	8006228 <SDMMC_CmdStopTransfer>
 8004d0c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f96f 	bl	8005004 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8004e28 <HAL_SD_IRQHandler+0x1bc>)
 8004d2c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d104      	bne.n	8004d50 <HAL_SD_IRQHandler+0xe4>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f94d 	bl	8004ff0 <HAL_SD_RxCpltCallback>
 8004d56:	e13b      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f93f 	bl	8004fdc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d5e:	e137      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8132 	beq.w	8004fd0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2200      	movs	r2, #0
 8004d72:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <HAL_SD_IRQHandler+0x12c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d011      	beq.n	8004dbc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 fa43 	bl	8006228 <SDMMC_CmdStopTransfer>
 8004da2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f924 	bl	8005004 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <HAL_SD_IRQHandler+0x172>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8fc 	bl	8004fdc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d105      	bne.n	8004dfa <HAL_SD_IRQHandler+0x18e>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80eb 	beq.w	8004fd0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8f8 	bl	8004ff0 <HAL_SD_RxCpltCallback>
}
 8004e00:	e0e6      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <HAL_SD_IRQHandler+0x1c0>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 f890 	bl	8005f40 <SD_Write_IT>
 8004e20:	e0d6      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
 8004e22:	bf00      	nop
 8004e24:	ffff3ec5 	.word	0xffff3ec5
 8004e28:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e32:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 809d 	beq.w	8004f76 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4e:	f043 0202 	orr.w	r2, r3, #2
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e68:	f043 0208 	orr.w	r2, r3, #8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9c:	f043 0210 	orr.w	r2, r3, #16
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8004fd8 <HAL_SD_IRQHandler+0x36c>)
 8004eaa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004eba:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eca:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eda:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004eea:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 f999 	bl	8006228 <SDMMC_CmdStopTransfer>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f10:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f865 	bl	8005004 <HAL_SD_ErrorCallback>
}
 8004f3a:	e049      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d044      	beq.n	8004fd0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d040      	beq.n	8004fd0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f848 	bl	8005004 <HAL_SD_ErrorCallback>
}
 8004f74:	e02c      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d025      	beq.n	8004fd0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f8c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10c      	bne.n	8004fb6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f001 f832 	bl	8006010 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8004fac:	e010      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 f81a 	bl	8005fe8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8004fb4:	e00c      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 f81b 	bl	8005ffc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8004fc6:	e003      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f001 f803 	bl	8005fd4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8004fce:	e7ff      	b.n	8004fd0 <HAL_SD_IRQHandler+0x364>
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	18000f3a 	.word	0x18000f3a

08004fdc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005026:	0f9b      	lsrs	r3, r3, #30
 8005028:	b2da      	uxtb	r2, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005032:	0e9b      	lsrs	r3, r3, #26
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	b2da      	uxtb	r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005044:	0e1b      	lsrs	r3, r3, #24
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	b2da      	uxtb	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	b2da      	uxtb	r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	b2da      	uxtb	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506e:	b2da      	uxtb	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005078:	0d1b      	lsrs	r3, r3, #20
 800507a:	b29a      	uxth	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	b2da      	uxtb	r2, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005096:	0bdb      	lsrs	r3, r3, #15
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a8:	0b9b      	lsrs	r3, r3, #14
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ba:	0b5b      	lsrs	r3, r3, #13
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050cc:	0b1b      	lsrs	r3, r3, #12
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2200      	movs	r2, #0
 80050de:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d163      	bne.n	80051b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ec:	009a      	lsls	r2, r3, #2
 80050ee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050f2:	4013      	ands	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80050f8:	0f92      	lsrs	r2, r2, #30
 80050fa:	431a      	orrs	r2, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005104:	0edb      	lsrs	r3, r3, #27
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	b2da      	uxtb	r2, r3
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005116:	0e1b      	lsrs	r3, r3, #24
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	b2da      	uxtb	r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005128:	0d5b      	lsrs	r3, r3, #21
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	b2da      	uxtb	r2, r3
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800513a:	0c9b      	lsrs	r3, r3, #18
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	b2da      	uxtb	r2, r3
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800514c:	0bdb      	lsrs	r3, r3, #15
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	b2da      	uxtb	r2, r3
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	7e1b      	ldrb	r3, [r3, #24]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	3302      	adds	r3, #2
 8005170:	2201      	movs	r2, #1
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800517a:	fb03 f202 	mul.w	r2, r3, r2
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	7a1b      	ldrb	r3, [r3, #8]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	2201      	movs	r2, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800519c:	0a52      	lsrs	r2, r2, #9
 800519e:	fb03 f202 	mul.w	r2, r3, r2
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80051ae:	e031      	b.n	8005214 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d11d      	bne.n	80051f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	431a      	orrs	r2, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	3301      	adds	r3, #1
 80051d4:	029a      	lsls	r2, r3, #10
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80051f2:	e00f      	b.n	8005214 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a58      	ldr	r2, [pc, #352]	@ (800535c <HAL_SD_GetCardCSD+0x344>)
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005200:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e09d      	b.n	8005350 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005218:	0b9b      	lsrs	r3, r3, #14
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	b2da      	uxtb	r2, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800522a:	09db      	lsrs	r3, r3, #7
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005232:	b2da      	uxtb	r2, r3
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005242:	b2da      	uxtb	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800524c:	0fdb      	lsrs	r3, r3, #31
 800524e:	b2da      	uxtb	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005258:	0f5b      	lsrs	r3, r3, #29
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	b2da      	uxtb	r2, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800526a:	0e9b      	lsrs	r3, r3, #26
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	b2da      	uxtb	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800527c:	0d9b      	lsrs	r3, r3, #22
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	b2da      	uxtb	r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800528e:	0d5b      	lsrs	r3, r3, #21
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052be:	0bdb      	lsrs	r3, r3, #15
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052d2:	0b9b      	lsrs	r3, r3, #14
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052e6:	0b5b      	lsrs	r3, r3, #13
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052fa:	0b1b      	lsrs	r3, r3, #12
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	b2da      	uxtb	r2, r3
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800530e:	0a9b      	lsrs	r3, r3, #10
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	b2da      	uxtb	r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	b2da      	uxtb	r2, r3
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800533e:	b2da      	uxtb	r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	1fe00fff 	.word	0x1fe00fff

08005360 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b094      	sub	sp, #80	@ 0x50
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b03      	cmp	r3, #3
 800537a:	d101      	bne.n	8005380 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0a7      	b.n	80054d0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fb36 	bl	80059f8 <SD_SendSDStatus>
 800538c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800538e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005390:	2b00      	cmp	r3, #0
 8005392:	d011      	beq.n	80053b8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a4f      	ldr	r2, [pc, #316]	@ (80054d8 <HAL_SD_GetCardStatus+0x178>)
 800539a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80053b6:	e070      	b.n	800549a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	099b      	lsrs	r3, r3, #6
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	0e1b      	lsrs	r3, r3, #24
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4313      	orrs	r3, r2
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	061a      	lsls	r2, r3, #24
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80053fe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	0a1b      	lsrs	r3, r3, #8
 8005404:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005408:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	0e1b      	lsrs	r3, r3, #24
 800540e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	b2da      	uxtb	r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	0d1b      	lsrs	r3, r3, #20
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	b2da      	uxtb	r2, r3
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	b29b      	uxth	r3, r3
 800543c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005440:	b29a      	uxth	r2, r3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	b29b      	uxth	r3, r3
 8005446:	b2db      	uxtb	r3, r3
 8005448:	b29b      	uxth	r3, r3
 800544a:	4313      	orrs	r3, r2
 800544c:	b29a      	uxth	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	0a9b      	lsrs	r3, r3, #10
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800545c:	b2da      	uxtb	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	0a1b      	lsrs	r3, r3, #8
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	b2da      	uxtb	r2, r3
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	b2da      	uxtb	r2, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	b2da      	uxtb	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	0e1b      	lsrs	r3, r3, #24
 8005494:	b2da      	uxtb	r2, r3
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fe9c 	bl	80061e0 <SDMMC_CmdBlockLength>
 80054a8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80054aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <HAL_SD_GetCardStatus+0x178>)
 80054b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054bc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80054cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3750      	adds	r7, #80	@ 0x50
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	1fe00fff 	.word	0x1fe00fff

080054dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b08d      	sub	sp, #52	@ 0x34
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2203      	movs	r2, #3
 80054f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d02e      	beq.n	800555a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005502:	d106      	bne.n	8005512 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005508:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005510:	e029      	b.n	8005566 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005518:	d10a      	bne.n	8005530 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fb64 	bl	8005be8 <SD_WideBus_Enable>
 8005520:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	635a      	str	r2, [r3, #52]	@ 0x34
 800552e:	e01a      	b.n	8005566 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fba1 	bl	8005c7e <SD_WideBus_Disable>
 800553c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	635a      	str	r2, [r3, #52]	@ 0x34
 800554a:	e00c      	b.n	8005566 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005550:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	635a      	str	r2, [r3, #52]	@ 0x34
 8005558:	e005      	b.n	8005566 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800555e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a5f      	ldr	r2, [pc, #380]	@ (80056f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005574:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800557c:	e096      	b.n	80056ac <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800557e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005582:	f04f 0100 	mov.w	r1, #0
 8005586:	f7fd ff5d 	bl	8003444 <HAL_RCCEx_GetPeriphCLKFreq>
 800558a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8083 	beq.w	800569a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4950      	ldr	r1, [pc, #320]	@ (80056f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80055b2:	fba1 1303 	umull	r1, r3, r1, r3
 80055b6:	0e1b      	lsrs	r3, r3, #24
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d303      	bcc.n	80055c4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e05a      	b.n	800567a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055cc:	d103      	bne.n	80055d6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	e051      	b.n	800567a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055de:	d126      	bne.n	800562e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10e      	bne.n	8005606 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4a43      	ldr	r2, [pc, #268]	@ (80056f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d906      	bls.n	80055fe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4a40      	ldr	r2, [pc, #256]	@ (80056f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	0e5b      	lsrs	r3, r3, #25
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e03d      	b.n	800567a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	e039      	b.n	800567a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	4a39      	ldr	r2, [pc, #228]	@ (80056f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d906      	bls.n	8005626 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4a36      	ldr	r2, [pc, #216]	@ (80056f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	0e5b      	lsrs	r3, r3, #25
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	e029      	b.n	800567a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	e025      	b.n	800567a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10e      	bne.n	8005654 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4a30      	ldr	r2, [pc, #192]	@ (80056fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d906      	bls.n	800564c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4a2c      	ldr	r2, [pc, #176]	@ (80056f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	0e1b      	lsrs	r3, r3, #24
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e016      	b.n	800567a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e012      	b.n	800567a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	4a26      	ldr	r2, [pc, #152]	@ (80056fc <HAL_SD_ConfigWideBusOperation+0x220>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d906      	bls.n	8005674 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4a22      	ldr	r2, [pc, #136]	@ (80056f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	0e1b      	lsrs	r3, r3, #24
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e002      	b.n	800567a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681c      	ldr	r4, [r3, #0]
 800567e:	466a      	mov	r2, sp
 8005680:	f107 0314 	add.w	r3, r7, #20
 8005684:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005688:	e882 0003 	stmia.w	r2, {r0, r1}
 800568c:	f107 0308 	add.w	r3, r7, #8
 8005690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005692:	4620      	mov	r0, r4
 8005694:	f000 fcc6 	bl	8006024 <SDMMC_Init>
 8005698:	e008      	b.n	80056ac <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fd93 	bl	80061e0 <SDMMC_CmdBlockLength>
 80056ba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00c      	beq.n	80056dc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a0a      	ldr	r2, [pc, #40]	@ (80056f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 80056c8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80056e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	372c      	adds	r7, #44	@ 0x2c
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd90      	pop	{r4, r7, pc}
 80056f0:	1fe00fff 	.word	0x1fe00fff
 80056f4:	55e63b89 	.word	0x55e63b89
 80056f8:	02faf080 	.word	0x02faf080
 80056fc:	017d7840 	.word	0x017d7840

08005700 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800570c:	f107 030c 	add.w	r3, r7, #12
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa40 	bl	8005b98 <SD_SendStatus>
 8005718:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	0a5b      	lsrs	r3, r3, #9
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005736:	693b      	ldr	r3, [r7, #16]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b090      	sub	sp, #64	@ 0x40
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800574c:	f7fb f8f2 	bl	8000934 <HAL_GetTick>
 8005750:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fcbd 	bl	80060d6 <SDMMC_GetPowerState>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005762:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005766:	e0b5      	b.n	80058d4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576c:	2b03      	cmp	r3, #3
 800576e:	d02e      	beq.n	80057ce <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fe7c 	bl	8006472 <SDMMC_CmdSendCID>
 800577a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800577c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <SD_InitCard+0x46>
    {
      return errorstate;
 8005782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005784:	e0a6      	b.n	80058d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fce8 	bl	8006162 <SDMMC_GetResponse>
 8005792:	4602      	mov	r2, r0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2104      	movs	r1, #4
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fcdf 	bl	8006162 <SDMMC_GetResponse>
 80057a4:	4602      	mov	r2, r0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2108      	movs	r1, #8
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fcd6 	bl	8006162 <SDMMC_GetResponse>
 80057b6:	4602      	mov	r2, r0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	210c      	movs	r1, #12
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fccd 	bl	8006162 <SDMMC_GetResponse>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d01d      	beq.n	8005812 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80057d6:	e019      	b.n	800580c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f107 020a 	add.w	r2, r7, #10
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fe84 	bl	80064f0 <SDMMC_CmdSetRelAdd>
 80057e8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <SD_InitCard+0xb4>
      {
        return errorstate;
 80057f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f2:	e06f      	b.n	80058d4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80057f4:	f7fb f89e 	bl	8000934 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3287 	movw	r2, #4999	@ 0x1387
 8005802:	4293      	cmp	r3, r2
 8005804:	d902      	bls.n	800580c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8005806:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800580a:	e063      	b.n	80058d4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800580c:	897b      	ldrh	r3, [r7, #10]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0e2      	beq.n	80057d8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005816:	2b03      	cmp	r3, #3
 8005818:	d036      	beq.n	8005888 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800581a:	897b      	ldrh	r3, [r7, #10]
 800581c:	461a      	mov	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f000 fe3e 	bl	80064b0 <SDMMC_CmdSendCSD>
 8005834:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <SD_InitCard+0x100>
    {
      return errorstate;
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	e049      	b.n	80058d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2100      	movs	r1, #0
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fc8b 	bl	8006162 <SDMMC_GetResponse>
 800584c:	4602      	mov	r2, r0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2104      	movs	r1, #4
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fc82 	bl	8006162 <SDMMC_GetResponse>
 800585e:	4602      	mov	r2, r0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2108      	movs	r1, #8
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fc79 	bl	8006162 <SDMMC_GetResponse>
 8005870:	4602      	mov	r2, r0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	210c      	movs	r1, #12
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fc70 	bl	8006162 <SDMMC_GetResponse>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2104      	movs	r1, #4
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fc67 	bl	8006162 <SDMMC_GetResponse>
 8005894:	4603      	mov	r3, r0
 8005896:	0d1a      	lsrs	r2, r3, #20
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800589c:	f107 030c 	add.w	r3, r7, #12
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fbb8 	bl	8005018 <HAL_SD_GetCardCSD>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80058b2:	e00f      	b.n	80058d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f000 fced 	bl	80062a0 <SDMMC_CmdSelDesel>
 80058c6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80058c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <SD_InitCard+0x192>
  {
    return errorstate;
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	e000      	b.n	80058d4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3740      	adds	r7, #64	@ 0x40
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fcf6 	bl	80062e6 <SDMMC_CmdGoIdleState>
 80058fa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	e072      	b.n	80059ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fd09 	bl	8006322 <SDMMC_CmdOperCond>
 8005910:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005918:	d10d      	bne.n	8005936 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fcde 	bl	80062e6 <SDMMC_CmdGoIdleState>
 800592a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <SD_PowerON+0x60>
    {
      return errorstate;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	e05a      	b.n	80059ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d137      	bne.n	80059b4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2100      	movs	r1, #0
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fd09 	bl	8006362 <SDMMC_CmdAppCommand>
 8005950:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d02d      	beq.n	80059b4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005958:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800595c:	e046      	b.n	80059ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fcfc 	bl	8006362 <SDMMC_CmdAppCommand>
 800596a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <SD_PowerON+0x9a>
    {
      return errorstate;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	e03a      	b.n	80059ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	491e      	ldr	r1, [pc, #120]	@ (80059f4 <SD_PowerON+0x118>)
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fd13 	bl	80063a8 <SDMMC_CmdAppOperCommand>
 8005982:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800598a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800598e:	e02d      	b.n	80059ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fbe3 	bl	8006162 <SDMMC_GetResponse>
 800599c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	0fdb      	lsrs	r3, r3, #31
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <SD_PowerON+0xce>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <SD_PowerON+0xd0>
 80059aa:	2300      	movs	r3, #0
 80059ac:	613b      	str	r3, [r7, #16]

    count++;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d802      	bhi.n	80059c4 <SD_PowerON+0xe8>
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0cc      	beq.n	800595e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d902      	bls.n	80059d4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80059ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059d2:	e00b      	b.n	80059ec <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	c1100000 	.word	0xc1100000

080059f8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	@ 0x30
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005a02:	f7fa ff97 	bl	8000934 <HAL_GetTick>
 8005a06:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fba5 	bl	8006162 <SDMMC_GetResponse>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a22:	d102      	bne.n	8005a2a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a28:	e0b0      	b.n	8005b8c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2140      	movs	r1, #64	@ 0x40
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fbd5 	bl	80061e0 <SDMMC_CmdBlockLength>
 8005a36:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	e0a0      	b.n	8005b8c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f000 fc83 	bl	8006362 <SDMMC_CmdAppCommand>
 8005a5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	e08d      	b.n	8005b8c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a70:	f04f 33ff 	mov.w	r3, #4294967295
 8005a74:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005a76:	2340      	movs	r3, #64	@ 0x40
 8005a78:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005a7a:	2360      	movs	r3, #96	@ 0x60
 8005a7c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a86:	2301      	movs	r3, #1
 8005a88:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f107 0208 	add.w	r2, r7, #8
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fb77 	bl	8006188 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fd6b 	bl	800657a <SDMMC_CmdStatusRegister>
 8005aa4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d02b      	beq.n	8005b04 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	e069      	b.n	8005b8c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d013      	beq.n	8005aee <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aca:	e00d      	b.n	8005ae8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fad1 	bl	8006078 <SDMMC_ReadFIFO>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	601a      	str	r2, [r3, #0]
        pData++;
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	3304      	adds	r3, #4
 8005ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8005ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	d9ee      	bls.n	8005acc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005aee:	f7fa ff21 	bl	8000934 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d102      	bne.n	8005b04 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005afe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b02:	e043      	b.n	8005b8c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0d2      	beq.n	8005ab8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005b20:	2308      	movs	r3, #8
 8005b22:	e033      	b.n	8005b8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b32:	2302      	movs	r3, #2
 8005b34:	e02a      	b.n	8005b8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005b44:	2320      	movs	r3, #32
 8005b46:	e021      	b.n	8005b8c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fa93 	bl	8006078 <SDMMC_ReadFIFO>
 8005b52:	4602      	mov	r2, r0
 8005b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b56:	601a      	str	r2, [r3, #0]
    pData++;
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b5e:	f7fa fee9 	bl	8000934 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d102      	bne.n	8005b74 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005b6e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b72:	e00b      	b.n	8005b8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e2      	bne.n	8005b48 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a03      	ldr	r2, [pc, #12]	@ (8005b94 <SD_SendSDStatus+0x19c>)
 8005b88:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3730      	adds	r7, #48	@ 0x30
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	18000f3a 	.word	0x18000f3a

08005b98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005ba8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bac:	e018      	b.n	8005be0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb6:	041b      	lsls	r3, r3, #16
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f000 fcba 	bl	8006534 <SDMMC_CmdSendStatus>
 8005bc0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <SD_SendStatus+0x34>
  {
    return errorstate;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	e009      	b.n	8005be0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fac5 	bl	8006162 <SDMMC_GetResponse>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 faaf 	bl	8006162 <SDMMC_GetResponse>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c0e:	d102      	bne.n	8005c16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005c14:	e02f      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c16:	f107 030c 	add.w	r3, r7, #12
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f879 	bl	8005d14 <SD_FindSCR>
 8005c22:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	e023      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01c      	beq.n	8005c72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f000 fb8c 	bl	8006362 <SDMMC_CmdAppCommand>
 8005c4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	e00f      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fbc3 	bl	80063e8 <SDMMC_CmdBusWidth>
 8005c62:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	e003      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e001      	b.n	8005c76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fa64 	bl	8006162 <SDMMC_GetResponse>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ca4:	d102      	bne.n	8005cac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ca6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005caa:	e02f      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005cac:	f107 030c 	add.w	r3, r7, #12
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f82e 	bl	8005d14 <SD_FindSCR>
 8005cb8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	e023      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01c      	beq.n	8005d08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f000 fb41 	bl	8006362 <SDMMC_CmdAppCommand>
 8005ce0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	e00f      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fb78 	bl	80063e8 <SDMMC_CmdBusWidth>
 8005cf8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	e003      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e001      	b.n	8005d0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d08:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08e      	sub	sp, #56	@ 0x38
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d1e:	f7fa fe09 	bl	8000934 <HAL_GetTick>
 8005d22:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2108      	movs	r1, #8
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fa50 	bl	80061e0 <SDMMC_CmdBlockLength>
 8005d40:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	e0ad      	b.n	8005ea8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f000 fb02 	bl	8006362 <SDMMC_CmdAppCommand>
 8005d5e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d68:	e09e      	b.n	8005ea8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d70:	2308      	movs	r3, #8
 8005d72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005d74:	2330      	movs	r3, #48	@ 0x30
 8005d76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f107 0210 	add.w	r2, r7, #16
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f9fa 	bl	8006188 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fb48 	bl	800642e <SDMMC_CmdSendSCR>
 8005d9e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d027      	beq.n	8005df6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	e07e      	b.n	8005ea8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d113      	bne.n	8005de0 <SD_FindSCR+0xcc>
 8005db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d110      	bne.n	8005de0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f958 	bl	8006078 <SDMMC_ReadFIFO>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f951 	bl	8006078 <SDMMC_ReadFIFO>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	60fb      	str	r3, [r7, #12]
      index++;
 8005dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ddc:	3301      	adds	r3, #1
 8005dde:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005de0:	f7fa fda8 	bl	8000934 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d102      	bne.n	8005df6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005df0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005df4:	e058      	b.n	8005ea8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dfc:	f240 532a 	movw	r3, #1322	@ 0x52a
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0d1      	beq.n	8005daa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2208      	movs	r2, #8
 8005e1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	e043      	b.n	8005ea8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2202      	movs	r2, #2
 8005e34:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e36:	2302      	movs	r3, #2
 8005e38:	e036      	b.n	8005ea8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e50:	2320      	movs	r3, #32
 8005e52:	e029      	b.n	8005ea8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a15      	ldr	r2, [pc, #84]	@ (8005eb0 <SD_FindSCR+0x19c>)
 8005e5a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	061a      	lsls	r2, r3, #24
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	0e1b      	lsrs	r3, r3, #24
 8005e78:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7c:	601a      	str	r2, [r3, #0]
    scr++;
 8005e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e80:	3304      	adds	r3, #4
 8005e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	061a      	lsls	r2, r3, #24
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	0e1b      	lsrs	r3, r3, #24
 8005ea0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3738      	adds	r7, #56	@ 0x38
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	18000f3a 	.word	0x18000f3a

08005eb4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	2b1f      	cmp	r3, #31
 8005ec8:	d936      	bls.n	8005f38 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e027      	b.n	8005f20 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 f8cf 	bl	8006078 <SDMMC_ReadFIFO>
 8005eda:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	0a1b      	lsrs	r3, r3, #8
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3301      	adds	r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	0e1b      	lsrs	r3, r3, #24
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	3301      	adds	r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b07      	cmp	r3, #7
 8005f24:	d9d4      	bls.n	8005ed0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f30:	f1a3 0220 	sub.w	r2, r3, #32
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8005f38:	bf00      	nop
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	2b1f      	cmp	r3, #31
 8005f54:	d93a      	bls.n	8005fcc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e02b      	b.n	8005fb4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	3301      	adds	r3, #1
 8005f66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	021a      	lsls	r2, r3, #8
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	3301      	adds	r3, #1
 8005f78:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	041a      	lsls	r2, r3, #16
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	061a      	lsls	r2, r3, #24
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f107 020c 	add.w	r2, r7, #12
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 f872 	bl	8006092 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b07      	cmp	r3, #7
 8005fb8:	d9d0      	bls.n	8005f5c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f1a3 0220 	sub.w	r2, r3, #32
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	621a      	str	r2, [r3, #32]
  }
}
 8005fcc:	bf00      	nop
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006024:	b084      	sub	sp, #16
 8006026:	b480      	push	{r7}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	f107 001c 	add.w	r0, r7, #28
 8006032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800603a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800603c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800603e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8006042:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8006044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8006046:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800604a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	4b07      	ldr	r3, [pc, #28]	@ (8006074 <SDMMC_Init+0x50>)
 8006058:	4013      	ands	r3, r2
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	b004      	add	sp, #16
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	ffc02c00 	.word	0xffc02c00

08006078 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f043 0203 	orr.w	r2, r3, #3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0303 	and.w	r3, r3, #3
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006112:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8006118:	431a      	orrs	r2, r3
                       Command->CPSM);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800611e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <SDMMC_SendCommand+0x50>)
 800612c:	4013      	ands	r3, r2
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	fffee0c0 	.word	0xfffee0c0

08006148 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	b2db      	uxtb	r3, r3
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3314      	adds	r3, #20
 8006170:	461a      	mov	r2, r3
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	4413      	add	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80061ae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80061b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80061ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0

}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80061ee:	2310      	movs	r3, #16
 80061f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006202:	f107 0308 	add.w	r3, r7, #8
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff ff73 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800620e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006212:	2110      	movs	r1, #16
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f9d3 	bl	80065c0 <SDMMC_GetCmdResp1>
 800621a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800621c:	69fb      	ldr	r3, [r7, #28]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006234:	230c      	movs	r3, #12
 8006236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006238:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800623c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006246:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006260:	f107 0308 	add.w	r3, r7, #8
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff ff44 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800626c:	4a0b      	ldr	r2, [pc, #44]	@ (800629c <SDMMC_CmdStopTransfer+0x74>)
 800626e:	210c      	movs	r1, #12
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f9a5 	bl	80065c0 <SDMMC_GetCmdResp1>
 8006276:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800628a:	d101      	bne.n	8006290 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8006290:	69fb      	ldr	r3, [r7, #28]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	05f5e100 	.word	0x05f5e100

080062a0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80062ae:	2307      	movs	r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062c2:	f107 0308 	add.w	r3, r7, #8
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff ff13 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80062ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062d2:	2107      	movs	r1, #7
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f973 	bl	80065c0 <SDMMC_GetCmdResp1>
 80062da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062dc:	69fb      	ldr	r3, [r7, #28]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b088      	sub	sp, #32
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80062f6:	2300      	movs	r3, #0
 80062f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006302:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006304:	f107 0308 	add.w	r3, r7, #8
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff fef2 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fb97 	bl	8006a44 <SDMMC_GetCmdError>
 8006316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006318:	69fb      	ldr	r3, [r7, #28]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b088      	sub	sp, #32
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800632a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800632e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006330:	2308      	movs	r3, #8
 8006332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006334:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800633e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006344:	f107 0308 	add.w	r3, r7, #8
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fed2 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb29 	bl	80069a8 <SDMMC_GetCmdResp7>
 8006356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006358:	69fb      	ldr	r3, [r7, #28]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006370:	2337      	movs	r3, #55	@ 0x37
 8006372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800637e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006382:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006384:	f107 0308 	add.w	r3, r7, #8
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff feb2 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006394:	2137      	movs	r1, #55	@ 0x37
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f912 	bl	80065c0 <SDMMC_GetCmdResp1>
 800639c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800639e:	69fb      	ldr	r3, [r7, #28]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80063b6:	2329      	movs	r3, #41	@ 0x29
 80063b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063ca:	f107 0308 	add.w	r3, r7, #8
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fe8f 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa2e 	bl	8006838 <SDMMC_GetCmdResp3>
 80063dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063de:	69fb      	ldr	r3, [r7, #28]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80063f6:	2306      	movs	r3, #6
 80063f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800640a:	f107 0308 	add.w	r3, r7, #8
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fe6f 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641a:	2106      	movs	r1, #6
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f8cf 	bl	80065c0 <SDMMC_GetCmdResp1>
 8006422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006424:	69fb      	ldr	r3, [r7, #28]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3720      	adds	r7, #32
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b088      	sub	sp, #32
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800643a:	2333      	movs	r3, #51	@ 0x33
 800643c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800643e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800644c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800644e:	f107 0308 	add.w	r3, r7, #8
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fe4d 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800645a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800645e:	2133      	movs	r1, #51	@ 0x33
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f8ad 	bl	80065c0 <SDMMC_GetCmdResp1>
 8006466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006468:	69fb      	ldr	r3, [r7, #28]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3720      	adds	r7, #32
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b088      	sub	sp, #32
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800647e:	2302      	movs	r3, #2
 8006480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006482:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800648c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006490:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006492:	f107 0308 	add.w	r3, r7, #8
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff fe2b 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f980 	bl	80067a4 <SDMMC_GetCmdResp2>
 80064a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064a6:	69fb      	ldr	r3, [r7, #28]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80064be:	2309      	movs	r3, #9
 80064c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80064c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80064c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064d2:	f107 0308 	add.w	r3, r7, #8
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fe0b 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f960 	bl	80067a4 <SDMMC_GetCmdResp2>
 80064e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064e6:	69fb      	ldr	r3, [r7, #28]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80064fe:	2303      	movs	r3, #3
 8006500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006502:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800650c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006510:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006512:	f107 0308 	add.w	r3, r7, #8
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff fdeb 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	2103      	movs	r1, #3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9c8 	bl	80068b8 <SDMMC_GetCmdResp6>
 8006528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800652a:	69fb      	ldr	r3, [r7, #28]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006542:	230d      	movs	r3, #13
 8006544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006546:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800654a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006554:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006556:	f107 0308 	add.w	r3, r7, #8
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fdc9 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006566:	210d      	movs	r1, #13
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f829 	bl	80065c0 <SDMMC_GetCmdResp1>
 800656e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006570:	69fb      	ldr	r3, [r7, #28]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b088      	sub	sp, #32
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006586:	230d      	movs	r3, #13
 8006588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800658a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800658e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800659a:	f107 0308 	add.w	r3, r7, #8
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff fda7 	bl	80060f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80065a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065aa:	210d      	movs	r1, #13
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f807 	bl	80065c0 <SDMMC_GetCmdResp1>
 80065b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065b4:	69fb      	ldr	r3, [r7, #28]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	460b      	mov	r3, r1
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80065ce:	4b70      	ldr	r3, [pc, #448]	@ (8006790 <SDMMC_GetCmdResp1+0x1d0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a70      	ldr	r2, [pc, #448]	@ (8006794 <SDMMC_GetCmdResp1+0x1d4>)
 80065d4:	fba2 2303 	umull	r2, r3, r2, r3
 80065d8:	0a5a      	lsrs	r2, r3, #9
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	1e5a      	subs	r2, r3, #1
 80065e6:	61fa      	str	r2, [r7, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80065f0:	e0c9      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4b67      	ldr	r3, [pc, #412]	@ (8006798 <SDMMC_GetCmdResp1+0x1d8>)
 80065fc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0ef      	beq.n	80065e2 <SDMMC_GetCmdResp1+0x22>
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1ea      	bne.n	80065e2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d004      	beq.n	8006622 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2204      	movs	r2, #4
 800661c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800661e:	2304      	movs	r3, #4
 8006620:	e0b1      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006634:	2301      	movs	r3, #1
 8006636:	e0a6      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a58      	ldr	r2, [pc, #352]	@ (800679c <SDMMC_GetCmdResp1+0x1dc>)
 800663c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f7ff fd82 	bl	8006148 <SDMMC_GetCommandResponse>
 8006644:	4603      	mov	r3, r0
 8006646:	461a      	mov	r2, r3
 8006648:	7afb      	ldrb	r3, [r7, #11]
 800664a:	4293      	cmp	r3, r2
 800664c:	d001      	beq.n	8006652 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800664e:	2301      	movs	r3, #1
 8006650:	e099      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006652:	2100      	movs	r1, #0
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff fd84 	bl	8006162 <SDMMC_GetResponse>
 800665a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4b50      	ldr	r3, [pc, #320]	@ (80067a0 <SDMMC_GetCmdResp1+0x1e0>)
 8006660:	4013      	ands	r3, r2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006666:	2300      	movs	r3, #0
 8006668:	e08d      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	da02      	bge.n	8006676 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006670:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006674:	e087      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006680:	2340      	movs	r3, #64	@ 0x40
 8006682:	e080      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800668e:	2380      	movs	r3, #128	@ 0x80
 8006690:	e079      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800669c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066a0:	e071      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80066ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066b0:	e069      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80066bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066c0:	e061      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80066cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80066d0:	e059      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80066e0:	e051      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80066ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80066f0:	e049      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80066fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006700:	e041      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800670c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006710:	e039      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800671c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006720:	e031      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800672c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006730:	e029      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800673c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006740:	e021      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800674c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006750:	e019      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800675c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006760:	e011      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800676c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006770:	e009      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800677c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006780:	e001      	b.n	8006786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006782:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	3720      	adds	r7, #32
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	24000000 	.word	0x24000000
 8006794:	10624dd3 	.word	0x10624dd3
 8006798:	00200045 	.word	0x00200045
 800679c:	002000c5 	.word	0x002000c5
 80067a0:	fdffe008 	.word	0xfdffe008

080067a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80067ac:	4b1f      	ldr	r3, [pc, #124]	@ (800682c <SDMMC_GetCmdResp2+0x88>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006830 <SDMMC_GetCmdResp2+0x8c>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	0a5b      	lsrs	r3, r3, #9
 80067b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067bc:	fb02 f303 	mul.w	r3, r2, r3
 80067c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1e5a      	subs	r2, r3, #1
 80067c6:	60fa      	str	r2, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d102      	bne.n	80067d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80067d0:	e026      	b.n	8006820 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0ef      	beq.n	80067c2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1ea      	bne.n	80067c2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d004      	beq.n	8006802 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2204      	movs	r2, #4
 80067fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067fe:	2304      	movs	r3, #4
 8006800:	e00e      	b.n	8006820 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d004      	beq.n	8006818 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006814:	2301      	movs	r3, #1
 8006816:	e003      	b.n	8006820 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a06      	ldr	r2, [pc, #24]	@ (8006834 <SDMMC_GetCmdResp2+0x90>)
 800681c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	24000000 	.word	0x24000000
 8006830:	10624dd3 	.word	0x10624dd3
 8006834:	002000c5 	.word	0x002000c5

08006838 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006840:	4b1a      	ldr	r3, [pc, #104]	@ (80068ac <SDMMC_GetCmdResp3+0x74>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1a      	ldr	r2, [pc, #104]	@ (80068b0 <SDMMC_GetCmdResp3+0x78>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	0a5b      	lsrs	r3, r3, #9
 800684c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006850:	fb02 f303 	mul.w	r3, r2, r3
 8006854:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1e5a      	subs	r2, r3, #1
 800685a:	60fa      	str	r2, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d102      	bne.n	8006866 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006860:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006864:	e01b      	b.n	800689e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800686a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0ef      	beq.n	8006856 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1ea      	bne.n	8006856 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2204      	movs	r2, #4
 8006890:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006892:	2304      	movs	r3, #4
 8006894:	e003      	b.n	800689e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a06      	ldr	r2, [pc, #24]	@ (80068b4 <SDMMC_GetCmdResp3+0x7c>)
 800689a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	24000000 	.word	0x24000000
 80068b0:	10624dd3 	.word	0x10624dd3
 80068b4:	002000c5 	.word	0x002000c5

080068b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	460b      	mov	r3, r1
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80068c6:	4b35      	ldr	r3, [pc, #212]	@ (800699c <SDMMC_GetCmdResp6+0xe4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a35      	ldr	r2, [pc, #212]	@ (80069a0 <SDMMC_GetCmdResp6+0xe8>)
 80068cc:	fba2 2303 	umull	r2, r3, r2, r3
 80068d0:	0a5b      	lsrs	r3, r3, #9
 80068d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d6:	fb02 f303 	mul.w	r3, r2, r3
 80068da:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	1e5a      	subs	r2, r3, #1
 80068e0:	61fa      	str	r2, [r7, #28]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80068ea:	e052      	b.n	8006992 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0ef      	beq.n	80068dc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ea      	bne.n	80068dc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	d004      	beq.n	800691c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2204      	movs	r2, #4
 8006916:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006918:	2304      	movs	r3, #4
 800691a:	e03a      	b.n	8006992 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800692e:	2301      	movs	r3, #1
 8006930:	e02f      	b.n	8006992 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff fc08 	bl	8006148 <SDMMC_GetCommandResponse>
 8006938:	4603      	mov	r3, r0
 800693a:	461a      	mov	r2, r3
 800693c:	7afb      	ldrb	r3, [r7, #11]
 800693e:	4293      	cmp	r3, r2
 8006940:	d001      	beq.n	8006946 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006942:	2301      	movs	r3, #1
 8006944:	e025      	b.n	8006992 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a16      	ldr	r2, [pc, #88]	@ (80069a4 <SDMMC_GetCmdResp6+0xec>)
 800694a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800694c:	2100      	movs	r1, #0
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff fc07 	bl	8006162 <SDMMC_GetResponse>
 8006954:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d106      	bne.n	800696e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	0c1b      	lsrs	r3, r3, #16
 8006964:	b29a      	uxth	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800696a:	2300      	movs	r3, #0
 800696c:	e011      	b.n	8006992 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006978:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800697c:	e009      	b.n	8006992 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800698c:	e001      	b.n	8006992 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800698e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006992:	4618      	mov	r0, r3
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	24000000 	.word	0x24000000
 80069a0:	10624dd3 	.word	0x10624dd3
 80069a4:	002000c5 	.word	0x002000c5

080069a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80069b0:	4b22      	ldr	r3, [pc, #136]	@ (8006a3c <SDMMC_GetCmdResp7+0x94>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a22      	ldr	r2, [pc, #136]	@ (8006a40 <SDMMC_GetCmdResp7+0x98>)
 80069b6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ba:	0a5b      	lsrs	r3, r3, #9
 80069bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c0:	fb02 f303 	mul.w	r3, r2, r3
 80069c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	1e5a      	subs	r2, r3, #1
 80069ca:	60fa      	str	r2, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80069d4:	e02c      	b.n	8006a30 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0ef      	beq.n	80069c6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1ea      	bne.n	80069c6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2204      	movs	r2, #4
 8006a00:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a02:	2304      	movs	r3, #4
 8006a04:	e014      	b.n	8006a30 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e009      	b.n	8006a30 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2240      	movs	r2, #64	@ 0x40
 8006a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006a2e:	2300      	movs	r3, #0

}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	24000000 	.word	0x24000000
 8006a40:	10624dd3 	.word	0x10624dd3

08006a44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006a4c:	4b11      	ldr	r3, [pc, #68]	@ (8006a94 <SDMMC_GetCmdError+0x50>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a11      	ldr	r2, [pc, #68]	@ (8006a98 <SDMMC_GetCmdError+0x54>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	0a5b      	lsrs	r3, r3, #9
 8006a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a5c:	fb02 f303 	mul.w	r3, r2, r3
 8006a60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1e5a      	subs	r2, r3, #1
 8006a66:	60fa      	str	r2, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a70:	e009      	b.n	8006a86 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0f1      	beq.n	8006a62 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a06      	ldr	r2, [pc, #24]	@ (8006a9c <SDMMC_GetCmdError+0x58>)
 8006a82:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	24000000 	.word	0x24000000
 8006a98:	10624dd3 	.word	0x10624dd3
 8006a9c:	002000c5 	.word	0x002000c5

08006aa0 <memset>:
 8006aa0:	4402      	add	r2, r0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d100      	bne.n	8006aaa <memset+0xa>
 8006aa8:	4770      	bx	lr
 8006aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8006aae:	e7f9      	b.n	8006aa4 <memset+0x4>

08006ab0 <__libc_init_array>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ae8 <__libc_init_array+0x38>)
 8006ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8006aec <__libc_init_array+0x3c>)
 8006ab6:	1b64      	subs	r4, r4, r5
 8006ab8:	10a4      	asrs	r4, r4, #2
 8006aba:	2600      	movs	r6, #0
 8006abc:	42a6      	cmp	r6, r4
 8006abe:	d109      	bne.n	8006ad4 <__libc_init_array+0x24>
 8006ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8006af0 <__libc_init_array+0x40>)
 8006ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8006af4 <__libc_init_array+0x44>)
 8006ac4:	f000 f818 	bl	8006af8 <_init>
 8006ac8:	1b64      	subs	r4, r4, r5
 8006aca:	10a4      	asrs	r4, r4, #2
 8006acc:	2600      	movs	r6, #0
 8006ace:	42a6      	cmp	r6, r4
 8006ad0:	d105      	bne.n	8006ade <__libc_init_array+0x2e>
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}
 8006ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad8:	4798      	blx	r3
 8006ada:	3601      	adds	r6, #1
 8006adc:	e7ee      	b.n	8006abc <__libc_init_array+0xc>
 8006ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae2:	4798      	blx	r3
 8006ae4:	3601      	adds	r6, #1
 8006ae6:	e7f2      	b.n	8006ace <__libc_init_array+0x1e>
 8006ae8:	08006b20 	.word	0x08006b20
 8006aec:	08006b20 	.word	0x08006b20
 8006af0:	08006b20 	.word	0x08006b20
 8006af4:	08006b24 	.word	0x08006b24

08006af8 <_init>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr

08006b04 <_fini>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr
